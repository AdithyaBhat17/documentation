(window.webpackJsonp=window.webpackJsonp||[]).push([[230],{306:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return b})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(3),i=n(7),c=(n(0),n(411)),r=n(415),o=n(416),b={title:"aws_kinesis",type:"input",status:"beta",categories:["Services","AWS"]},l={unversionedId:"components/inputs/aws_kinesis",id:"components/inputs/aws_kinesis",isDocsHomePage:!1,title:"aws_kinesis",description:"\x3c!--",source:"@site/docs/components/inputs/aws_kinesis.md",slug:"/components/inputs/aws_kinesis",permalink:"/docs/components/inputs/aws_kinesis",editUrl:"https://github.com/Jeffail/benthos/edit/master/website/docs/components/inputs/aws_kinesis.md",version:"current",sidebar:"docs",previous:{title:"amqp_1",permalink:"/docs/components/inputs/amqp_1"},next:{title:"aws_s3",permalink:"/docs/components/inputs/aws_s3"}},s=[{value:"Table Schema",id:"table-schema",children:[]},{value:"Batching",id:"batching",children:[]},{value:"Fields",id:"fields",children:[{value:"<code>streams</code>",id:"streams",children:[]},{value:"<code>dynamodb</code>",id:"dynamodb",children:[]},{value:"<code>dynamodb.table</code>",id:"dynamodbtable",children:[]},{value:"<code>dynamodb.create</code>",id:"dynamodbcreate",children:[]},{value:"<code>dynamodb.billing_mode</code>",id:"dynamodbbilling_mode",children:[]},{value:"<code>dynamodb.read_capacity_units</code>",id:"dynamodbread_capacity_units",children:[]},{value:"<code>dynamodb.write_capacity_units</code>",id:"dynamodbwrite_capacity_units",children:[]},{value:"<code>checkpoint_limit</code>",id:"checkpoint_limit",children:[]},{value:"<code>commit_period</code>",id:"commit_period",children:[]},{value:"<code>rebalance_period</code>",id:"rebalance_period",children:[]},{value:"<code>lease_period</code>",id:"lease_period",children:[]},{value:"<code>start_from_oldest</code>",id:"start_from_oldest",children:[]},{value:"<code>region</code>",id:"region",children:[]},{value:"<code>endpoint</code>",id:"endpoint",children:[]},{value:"<code>credentials</code>",id:"credentials",children:[]},{value:"<code>credentials.profile</code>",id:"credentialsprofile",children:[]},{value:"<code>credentials.id</code>",id:"credentialsid",children:[]},{value:"<code>credentials.secret</code>",id:"credentialssecret",children:[]},{value:"<code>credentials.token</code>",id:"credentialstoken",children:[]},{value:"<code>credentials.role</code>",id:"credentialsrole",children:[]},{value:"<code>credentials.role_external_id</code>",id:"credentialsrole_external_id",children:[]},{value:"<code>batching</code>",id:"batching-1",children:[]},{value:"<code>batching.count</code>",id:"batchingcount",children:[]},{value:"<code>batching.byte_size</code>",id:"batchingbyte_size",children:[]},{value:"<code>batching.period</code>",id:"batchingperiod",children:[]},{value:"<code>batching.check</code>",id:"batchingcheck",children:[]},{value:"<code>batching.processors</code>",id:"batchingprocessors",children:[]}]}],d={toc:s};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"BETA: This component is mostly stable but breaking changes could still be made outside of major version releases if a fundamental problem with the component is found."),Object(c.b)("p",null,"Receive messages from one or more Kinesis streams."),Object(c.b)("p",null,"Introduced in version 3.36.0."),Object(c.b)(r.a,{defaultValue:"common",values:[{label:"Common",value:"common"},{label:"Advanced",value:"advanced"}],mdxType:"Tabs"},Object(c.b)(o.a,{value:"common",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'# Common config fields, showing default values\ninput:\n  aws_kinesis:\n    streams: []\n    dynamodb:\n      table: ""\n      create: false\n    checkpoint_limit: 1\n    commit_period: 5s\n    start_from_oldest: true\n    region: eu-west-1\n    batching:\n      count: 0\n      byte_size: 0\n      period: ""\n      check: ""\n'))),Object(c.b)(o.a,{value:"advanced",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'# All config fields, showing default values\ninput:\n  aws_kinesis:\n    streams: []\n    dynamodb:\n      table: ""\n      create: false\n      billing_mode: PAY_PER_REQUEST\n      read_capacity_units: 0\n      write_capacity_units: 0\n    checkpoint_limit: 1\n    commit_period: 5s\n    rebalance_period: 30s\n    lease_period: 30s\n    start_from_oldest: true\n    region: eu-west-1\n    endpoint: ""\n    credentials:\n      profile: ""\n      id: ""\n      secret: ""\n      token: ""\n      role: ""\n      role_external_id: ""\n    batching:\n      count: 0\n      byte_size: 0\n      period: ""\n      check: ""\n      processors: []\n')))),Object(c.b)("p",null,"Consumes messages from one or more Kinesis streams either by automatically balancing shards across other instances of this input, or by consuming shards listed explicitly. The latest message sequence consumed by this input is stored within a ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"#table-schema"}),"DynamoDB table"),", which allows it to resume at the correct sequence of the shard during restarts. This table is also used for coordination across distributed inputs when shard balancing."),Object(c.b)("p",null,"Benthos will not store a consumed sequence unless it is acknowledged at the output level, which ensures at-least-once delivery guarantees. However, this also means that by default messages of a given shard cannot be processed concurrently. In order to increase the number of shard messages that can be processed concurrently increase the field ",Object(c.b)("inlineCode",{parentName:"p"},"checkpoint_limit"),"."),Object(c.b)("h2",{id:"table-schema"},"Table Schema"),Object(c.b)("p",null,"It's possible to configure Benthos to create the DynamoDB table required for coordination if it does not already exist. However, if you wish to create this yourself (recommended) then create a table with a string HASH key ",Object(c.b)("inlineCode",{parentName:"p"},"StreamID")," and a string RANGE key ",Object(c.b)("inlineCode",{parentName:"p"},"ShardID"),". "),Object(c.b)("h2",{id:"batching"},"Batching"),Object(c.b)("p",null,"Use the ",Object(c.b)("inlineCode",{parentName:"p"},"batching")," fields to configure an optional ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/configuration/batching#batch-policy"}),"batching policy"),". Each stream shard will be batched separately in order to ensure that acknowledgements aren't contaminated. Any other batching mechanism will stall with this input due its sequential transaction model."),Object(c.b)("h2",{id:"fields"},"Fields"),Object(c.b)("h3",{id:"streams"},Object(c.b)("inlineCode",{parentName:"h3"},"streams")),Object(c.b)("p",null,"One or more Kinesis data streams to consume from. Shards of a stream are automatically balanced across consumers by coordinating through the provided DynamoDB table. Multiple comma separated streams can be listed in a single element. Shards are automatically distributed across consumers of a stream by coordinating through the provided DynamoDB table. Alternatively, it's possible to specify an explicit shard to consume from with a colon after the stream name, e.g. ",Object(c.b)("inlineCode",{parentName:"p"},"foo:0")," would consume the shard ",Object(c.b)("inlineCode",{parentName:"p"},"0")," of the stream ",Object(c.b)("inlineCode",{parentName:"p"},"foo"),"."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"array"),Object(c.b)("br",{parentName:"p"}),"\n","Default: ",Object(c.b)("inlineCode",{parentName:"p"},"[]"),"  "),Object(c.b)("h3",{id:"dynamodb"},Object(c.b)("inlineCode",{parentName:"h3"},"dynamodb")),Object(c.b)("p",null,"Determines the table used for storing and accessing the latest consumed sequence for shards, and for coordinating balanced consumers of streams."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"object"),"  "),Object(c.b)("h3",{id:"dynamodbtable"},Object(c.b)("inlineCode",{parentName:"h3"},"dynamodb.table")),Object(c.b)("p",null,"The name of the table to access."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"string"),Object(c.b)("br",{parentName:"p"}),"\n","Default: ",Object(c.b)("inlineCode",{parentName:"p"},'""'),"  "),Object(c.b)("h3",{id:"dynamodbcreate"},Object(c.b)("inlineCode",{parentName:"h3"},"dynamodb.create")),Object(c.b)("p",null,"Whether, if the table does not exist, it should be created."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"bool"),Object(c.b)("br",{parentName:"p"}),"\n","Default: ",Object(c.b)("inlineCode",{parentName:"p"},"false"),"  "),Object(c.b)("h3",{id:"dynamodbbilling_mode"},Object(c.b)("inlineCode",{parentName:"h3"},"dynamodb.billing_mode")),Object(c.b)("p",null,"When creating the table determines the billing mode."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"string"),Object(c.b)("br",{parentName:"p"}),"\n","Default: ",Object(c.b)("inlineCode",{parentName:"p"},'"PAY_PER_REQUEST"'),Object(c.b)("br",{parentName:"p"}),"\n","Options: ",Object(c.b)("inlineCode",{parentName:"p"},"PROVISIONED"),", ",Object(c.b)("inlineCode",{parentName:"p"},"PAY_PER_REQUEST"),"."),Object(c.b)("h3",{id:"dynamodbread_capacity_units"},Object(c.b)("inlineCode",{parentName:"h3"},"dynamodb.read_capacity_units")),Object(c.b)("p",null,"Set the provisioned read capacity when creating the table with a ",Object(c.b)("inlineCode",{parentName:"p"},"billing_mode")," of ",Object(c.b)("inlineCode",{parentName:"p"},"PROVISIONED"),"."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"number"),Object(c.b)("br",{parentName:"p"}),"\n","Default: ",Object(c.b)("inlineCode",{parentName:"p"},"0"),"  "),Object(c.b)("h3",{id:"dynamodbwrite_capacity_units"},Object(c.b)("inlineCode",{parentName:"h3"},"dynamodb.write_capacity_units")),Object(c.b)("p",null,"Set the provisioned write capacity when creating the table with a ",Object(c.b)("inlineCode",{parentName:"p"},"billing_mode")," of ",Object(c.b)("inlineCode",{parentName:"p"},"PROVISIONED"),"."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"number"),Object(c.b)("br",{parentName:"p"}),"\n","Default: ",Object(c.b)("inlineCode",{parentName:"p"},"0"),"  "),Object(c.b)("h3",{id:"checkpoint_limit"},Object(c.b)("inlineCode",{parentName:"h3"},"checkpoint_limit")),Object(c.b)("p",null,"The maximum gap between the in flight sequence versus the latest acknowledged sequence at a given time. Increasing this limit enables parallel processing and batching at the output level to work on individual shards. Any given sequence will not be committed unless all messages under that offset are delivered in order to preserve at least once delivery guarantees."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"number"),Object(c.b)("br",{parentName:"p"}),"\n","Default: ",Object(c.b)("inlineCode",{parentName:"p"},"1"),"  "),Object(c.b)("h3",{id:"commit_period"},Object(c.b)("inlineCode",{parentName:"h3"},"commit_period")),Object(c.b)("p",null,"The period of time between each update to the checkpoint table."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"string"),Object(c.b)("br",{parentName:"p"}),"\n","Default: ",Object(c.b)("inlineCode",{parentName:"p"},'"5s"'),"  "),Object(c.b)("h3",{id:"rebalance_period"},Object(c.b)("inlineCode",{parentName:"h3"},"rebalance_period")),Object(c.b)("p",null,"The period of time between each attempt to rebalance shards across clients."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"string"),Object(c.b)("br",{parentName:"p"}),"\n","Default: ",Object(c.b)("inlineCode",{parentName:"p"},'"30s"'),"  "),Object(c.b)("h3",{id:"lease_period"},Object(c.b)("inlineCode",{parentName:"h3"},"lease_period")),Object(c.b)("p",null,"The period of time after which a client that has failed to update a shard checkpoint is assumed to be inactive."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"string"),Object(c.b)("br",{parentName:"p"}),"\n","Default: ",Object(c.b)("inlineCode",{parentName:"p"},'"30s"'),"  "),Object(c.b)("h3",{id:"start_from_oldest"},Object(c.b)("inlineCode",{parentName:"h3"},"start_from_oldest")),Object(c.b)("p",null,"Whether to consume from the oldest message when a sequence does not yet exist for the stream."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"bool"),Object(c.b)("br",{parentName:"p"}),"\n","Default: ",Object(c.b)("inlineCode",{parentName:"p"},"true"),"  "),Object(c.b)("h3",{id:"region"},Object(c.b)("inlineCode",{parentName:"h3"},"region")),Object(c.b)("p",null,"The AWS region to target."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"string"),Object(c.b)("br",{parentName:"p"}),"\n","Default: ",Object(c.b)("inlineCode",{parentName:"p"},'"eu-west-1"'),"  "),Object(c.b)("h3",{id:"endpoint"},Object(c.b)("inlineCode",{parentName:"h3"},"endpoint")),Object(c.b)("p",null,"Allows you to specify a custom endpoint for the AWS API."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"string"),Object(c.b)("br",{parentName:"p"}),"\n","Default: ",Object(c.b)("inlineCode",{parentName:"p"},'""'),"  "),Object(c.b)("h3",{id:"credentials"},Object(c.b)("inlineCode",{parentName:"h3"},"credentials")),Object(c.b)("p",null,"Optional manual configuration of AWS credentials to use. More information can be found ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/guides/aws"}),"in this document"),"."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"object"),"  "),Object(c.b)("h3",{id:"credentialsprofile"},Object(c.b)("inlineCode",{parentName:"h3"},"credentials.profile")),Object(c.b)("p",null,"A profile from ",Object(c.b)("inlineCode",{parentName:"p"},"~/.aws/credentials")," to use."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"string"),Object(c.b)("br",{parentName:"p"}),"\n","Default: ",Object(c.b)("inlineCode",{parentName:"p"},'""'),"  "),Object(c.b)("h3",{id:"credentialsid"},Object(c.b)("inlineCode",{parentName:"h3"},"credentials.id")),Object(c.b)("p",null,"The ID of credentials to use."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"string"),Object(c.b)("br",{parentName:"p"}),"\n","Default: ",Object(c.b)("inlineCode",{parentName:"p"},'""'),"  "),Object(c.b)("h3",{id:"credentialssecret"},Object(c.b)("inlineCode",{parentName:"h3"},"credentials.secret")),Object(c.b)("p",null,"The secret for the credentials being used."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"string"),Object(c.b)("br",{parentName:"p"}),"\n","Default: ",Object(c.b)("inlineCode",{parentName:"p"},'""'),"  "),Object(c.b)("h3",{id:"credentialstoken"},Object(c.b)("inlineCode",{parentName:"h3"},"credentials.token")),Object(c.b)("p",null,"The token for the credentials being used, required when using short term credentials."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"string"),Object(c.b)("br",{parentName:"p"}),"\n","Default: ",Object(c.b)("inlineCode",{parentName:"p"},'""'),"  "),Object(c.b)("h3",{id:"credentialsrole"},Object(c.b)("inlineCode",{parentName:"h3"},"credentials.role")),Object(c.b)("p",null,"A role ARN to assume."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"string"),Object(c.b)("br",{parentName:"p"}),"\n","Default: ",Object(c.b)("inlineCode",{parentName:"p"},'""'),"  "),Object(c.b)("h3",{id:"credentialsrole_external_id"},Object(c.b)("inlineCode",{parentName:"h3"},"credentials.role_external_id")),Object(c.b)("p",null,"An external ID to provide when assuming a role."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"string"),Object(c.b)("br",{parentName:"p"}),"\n","Default: ",Object(c.b)("inlineCode",{parentName:"p"},'""'),"  "),Object(c.b)("h3",{id:"batching-1"},Object(c.b)("inlineCode",{parentName:"h3"},"batching")),Object(c.b)("p",null,"Allows you to configure a ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/configuration/batching"}),"batching policy"),"."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"object"),"  "),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'# Examples\n\nbatching:\n  byte_size: 5000\n  count: 0\n  period: 1s\n\nbatching:\n  count: 10\n  period: 1s\n\nbatching:\n  check: this.contains("END BATCH")\n  count: 0\n  period: 1m\n')),Object(c.b)("h3",{id:"batchingcount"},Object(c.b)("inlineCode",{parentName:"h3"},"batching.count")),Object(c.b)("p",null,"A number of messages at which the batch should be flushed. If ",Object(c.b)("inlineCode",{parentName:"p"},"0")," disables count based batching."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"number"),Object(c.b)("br",{parentName:"p"}),"\n","Default: ",Object(c.b)("inlineCode",{parentName:"p"},"0"),"  "),Object(c.b)("h3",{id:"batchingbyte_size"},Object(c.b)("inlineCode",{parentName:"h3"},"batching.byte_size")),Object(c.b)("p",null,"An amount of bytes at which the batch should be flushed. If ",Object(c.b)("inlineCode",{parentName:"p"},"0")," disables size based batching."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"number"),Object(c.b)("br",{parentName:"p"}),"\n","Default: ",Object(c.b)("inlineCode",{parentName:"p"},"0"),"  "),Object(c.b)("h3",{id:"batchingperiod"},Object(c.b)("inlineCode",{parentName:"h3"},"batching.period")),Object(c.b)("p",null,"A period in which an incomplete batch should be flushed regardless of its size."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"string"),Object(c.b)("br",{parentName:"p"}),"\n","Default: ",Object(c.b)("inlineCode",{parentName:"p"},'""'),"  "),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"# Examples\n\nperiod: 1s\n\nperiod: 1m\n\nperiod: 500ms\n")),Object(c.b)("h3",{id:"batchingcheck"},Object(c.b)("inlineCode",{parentName:"h3"},"batching.check")),Object(c.b)("p",null,"A ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/guides/bloblang/about/"}),"Bloblang query")," that should return a boolean value indicating whether a message should end a batch."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"string"),Object(c.b)("br",{parentName:"p"}),"\n","Default: ",Object(c.b)("inlineCode",{parentName:"p"},'""'),"  "),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'# Examples\n\ncheck: this.type == "end_of_transaction"\n')),Object(c.b)("h3",{id:"batchingprocessors"},Object(c.b)("inlineCode",{parentName:"h3"},"batching.processors")),Object(c.b)("p",null,"A list of ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/components/processors/about"}),"processors")," to apply to a batch as it is flushed. This allows you to aggregate and archive the batch however you see fit. Please note that all resulting messages are flushed as a single batch, therefore splitting the batch into smaller batches using these processors is a no-op."),Object(c.b)("p",null,"Type: ",Object(c.b)("inlineCode",{parentName:"p"},"array"),Object(c.b)("br",{parentName:"p"}),"\n","Default: ",Object(c.b)("inlineCode",{parentName:"p"},"[]"),"  "),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"# Examples\n\nprocessors:\n  - archive:\n      format: lines\n\nprocessors:\n  - archive:\n      format: json_array\n\nprocessors:\n  - merge_json: {}\n")))}p.isMDXComponent=!0},411:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),s=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,r=e.parentName,l=b(e,["components","mdxType","originalType","parentName"]),d=s(n),u=a,m=d["".concat(r,".").concat(u)]||d[u]||p[u]||c;return n?i.a.createElement(m,o(o({ref:t},l),{},{components:n})):i.a.createElement(m,o({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,r=new Array(c);r[0]=u;var o={};for(var b in t)hasOwnProperty.call(t,b)&&(o[b]=t[b]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var l=2;l<c;l++)r[l]=n[l];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},412:function(e,t,n){"use strict";function a(e){var t,n,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(i&&(i+=" "),i+=n);else for(t in e)e[t]&&(i&&(i+=" "),i+=t);return i}t.a=function(){for(var e,t,n=0,i="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(i&&(i+=" "),i+=t);return i}},413:function(e,t,n){"use strict";var a=n(0),i=n(414);t.a=function(){var e=Object(a.useContext)(i.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},414:function(e,t,n){"use strict";var a=n(0),i=Object(a.createContext)(void 0);t.a=i},415:function(e,t,n){"use strict";var a=n(0),i=n.n(a),c=n(413),r=n(412),o=n(56),b=n.n(o),l=37,s=39;t.a=function(e){var t=e.lazy,n=e.block,o=e.defaultValue,d=e.values,p=e.groupId,u=e.className,m=Object(c.a)(),h=m.tabGroupChoices,O=m.setTabGroupChoices,j=Object(a.useState)(o),f=j[0],g=j[1],y=a.Children.toArray(e.children);if(null!=p){var N=h[p];null!=N&&N!==f&&d.some((function(e){return e.value===N}))&&g(N)}var v=function(e){g(e),null!=p&&O(p,e)},C=[];return i.a.createElement("div",null,i.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(r.a)("tabs",{"tabs--block":n},u)},d.map((function(e){var t=e.value,n=e.label;return i.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":f===t,className:Object(r.a)("tabs__item",b.a.tabItem,{"tabs__item--active":f===t}),key:t,ref:function(e){return C.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case s:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case l:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(C,e.target,e)},onFocus:function(){return v(t)},onClick:function(){v(t)}},n)}))),t?Object(a.cloneElement)(y.filter((function(e){return e.props.value===f}))[0],{className:"margin-vert--md"}):i.a.createElement("div",{className:"margin-vert--md"},y.map((function(e,t){return Object(a.cloneElement)(e,{key:t,hidden:e.props.value!==f})}))))}},416:function(e,t,n){"use strict";var a=n(3),i=n(0),c=n.n(i);t.a=function(e){var t=e.children,n=e.hidden,i=e.className;return c.a.createElement("div",Object(a.a)({role:"tabpanel"},{hidden:n,className:i}),t)}}}]);