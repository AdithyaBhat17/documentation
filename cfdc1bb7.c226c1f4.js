(window.webpackJsonp=window.webpackJsonp||[]).push([[268],{345:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),i=(n(0),n(411)),s={title:"Streams API"},o={unversionedId:"guides/streams_mode/streams_api",id:"guides/streams_mode/streams_api",isDocsHomePage:!1,title:"Streams API",description:"When Benthos is run in streams mode it will open up an HTTP REST API for",source:"@site/docs/guides/streams_mode/streams_api.md",slug:"/guides/streams_mode/streams_api",permalink:"/docs/guides/streams_mode/streams_api",editUrl:"https://github.com/Jeffail/benthos/edit/master/website/docs/guides/streams_mode/streams_api.md",version:"current",sidebar:"docs",previous:{title:"Streams Via REST API",permalink:"/docs/guides/streams_mode/using_rest_api"},next:{title:"Migrating to Version 2",permalink:"/docs/guides/migration/v2"}},c=[{value:"API",id:"api",children:[{value:"GET <code>/ready</code>",id:"get-ready",children:[]},{value:"GET <code>/streams</code>",id:"get-streams",children:[]},{value:"POST <code>/streams</code>",id:"post-streams",children:[]},{value:"POST <code>/streams/{id}</code>",id:"post-streamsid",children:[]},{value:"GET <code>/streams/{id}</code>",id:"get-streamsid",children:[]},{value:"PUT <code>/streams/{id}</code>",id:"put-streamsid",children:[]},{value:"PATCH <code>/streams/{id}</code>",id:"patch-streamsid",children:[]},{value:"DELETE <code>/streams/{id}</code>",id:"delete-streamsid",children:[]},{value:"GET <code>/streams/{id}/stats</code>",id:"get-streamsidstats",children:[]}]}],d={toc:c};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"When Benthos is run in ",Object(i.b)("inlineCode",{parentName:"p"},"streams")," mode it will open up an HTTP REST API for\ncreating and managing independent streams of data instead of creating a single\nstream."),Object(i.b)("p",null,"Each stream has its own input, buffer, pipeline and output sections which\ncontains an isolated stream of data with its own lifetime."),Object(i.b)("p",null,"A walkthrough on using this API ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/guides/streams_mode/using_rest_api"}),"can be found here"),"."),Object(i.b)("h2",{id:"api"},"API"),Object(i.b)("h3",{id:"get-ready"},"GET ",Object(i.b)("inlineCode",{parentName:"h3"},"/ready")),Object(i.b)("p",null,"Returns a 200 OK response if all active streams are connected to their\nrespective inputs and outputs at the time of the request. Otherwise, a 503\nresponse is returned along with a message naming the faulty stream."),Object(i.b)("p",null,"If zero streams are active this endpoint still returns a 200 OK response."),Object(i.b)("h3",{id:"get-streams"},"GET ",Object(i.b)("inlineCode",{parentName:"h3"},"/streams")),Object(i.b)("p",null,"Returns a map of existing streams by their unique identifiers to an object\nshowing their status and uptime."),Object(i.b)("h4",{id:"response-200"},"Response 200"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    "<string, stream id>": {\n        "active": "<bool, whether the stream is running>",\n        "uptime": "<float, uptime in seconds>",\n        "uptime_str": "<string, human readable string of uptime>"\n    }\n}\n')),Object(i.b)("h3",{id:"post-streams"},"POST ",Object(i.b)("inlineCode",{parentName:"h3"},"/streams")),Object(i.b)("p",null,"Sets the entire collection of streams to the body of the request. Streams that\nexist but aren't within the request body are ",Object(i.b)("em",{parentName:"p"},"removed"),", streams that exist\nalready and are in the request body are updated, other streams within the\nrequest body are created."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    "<string, stream id>": "<object, a standard Benthos stream configuration>"\n}\n')),Object(i.b)("h4",{id:"response-200-1"},"Response 200"),Object(i.b)("p",null,"The streams were updated successfully."),Object(i.b)("h3",{id:"post-streamsid"},"POST ",Object(i.b)("inlineCode",{parentName:"h3"},"/streams/{id}")),Object(i.b)("p",null,"Create a new stream identified by ",Object(i.b)("inlineCode",{parentName:"p"},"id")," by posting a body containing the stream\nconfiguration in either JSON or YAML format. The configuration should be a\nstandard Benthos configuration containing the sections ",Object(i.b)("inlineCode",{parentName:"p"},"input"),", ",Object(i.b)("inlineCode",{parentName:"p"},"buffer"),",\n",Object(i.b)("inlineCode",{parentName:"p"},"pipeline")," and ",Object(i.b)("inlineCode",{parentName:"p"},"output"),"."),Object(i.b)("h4",{id:"response-200-2"},"Response 200"),Object(i.b)("p",null,"The stream was created successfully."),Object(i.b)("h3",{id:"get-streamsid"},"GET ",Object(i.b)("inlineCode",{parentName:"h3"},"/streams/{id}")),Object(i.b)("p",null,"Read the details of an existing stream identified by ",Object(i.b)("inlineCode",{parentName:"p"},"id"),"."),Object(i.b)("h4",{id:"response-200-3"},"Response 200"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    "active": "<bool, whether the stream is running>",\n    "uptime": "<float, uptime in seconds>",\n    "uptime_str": "<string, human readable string of uptime>",\n    "config": "<object, the configuration of the stream>"\n}\n')),Object(i.b)("h3",{id:"put-streamsid"},"PUT ",Object(i.b)("inlineCode",{parentName:"h3"},"/streams/{id}")),Object(i.b)("p",null,"Update an existing stream identified by ",Object(i.b)("inlineCode",{parentName:"p"},"id")," by posting a body containing the\nnew stream configuration in either JSON or YAML format. The configuration should\nbe a standard Benthos configuration containing the sections ",Object(i.b)("inlineCode",{parentName:"p"},"input"),", ",Object(i.b)("inlineCode",{parentName:"p"},"buffer"),",\n",Object(i.b)("inlineCode",{parentName:"p"},"pipeline")," and ",Object(i.b)("inlineCode",{parentName:"p"},"output"),"."),Object(i.b)("p",null,"The previous stream will be shut down before and a new stream will take its\nplace."),Object(i.b)("h4",{id:"response-200-4"},"Response 200"),Object(i.b)("p",null,"The stream was updated successfully."),Object(i.b)("h3",{id:"patch-streamsid"},"PATCH ",Object(i.b)("inlineCode",{parentName:"h3"},"/streams/{id}")),Object(i.b)("p",null,"Update an existing stream identified by ",Object(i.b)("inlineCode",{parentName:"p"},"id")," by posting a body containing only\nchanges to be made to the existing configuration. The existing configuration\nwill be patched with the new fields and the stream restarted with the result."),Object(i.b)("h4",{id:"response-200-5"},"Response 200"),Object(i.b)("p",null,"The stream was patched successfully."),Object(i.b)("h3",{id:"delete-streamsid"},"DELETE ",Object(i.b)("inlineCode",{parentName:"h3"},"/streams/{id}")),Object(i.b)("p",null,"Attempt to shut down and remove a stream identified by ",Object(i.b)("inlineCode",{parentName:"p"},"id"),"."),Object(i.b)("h4",{id:"response-200-6"},"Response 200"),Object(i.b)("p",null,"The stream was found, shut down and removed successfully."),Object(i.b)("h3",{id:"get-streamsidstats"},"GET ",Object(i.b)("inlineCode",{parentName:"h3"},"/streams/{id}/stats")),Object(i.b)("p",null,"Read the metrics of an existing stream as a hierarchical JSON object."),Object(i.b)("h4",{id:"response-200-7"},"Response 200"),Object(i.b)("p",null,"The stream was found."))}p.isMDXComponent=!0},411:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=r.a.createContext({}),p=function(e){var t=r.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},b=function(e){var t=p(e.components);return r.a.createElement(d.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),b=p(n),u=a,m=b["".concat(s,".").concat(u)]||b[u]||l[u]||i;return n?r.a.createElement(m,o(o({ref:t},d),{},{components:n})):r.a.createElement(m,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var d=2;d<i;d++)s[d]=n[d];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);