"use strict";(self.webpackChunkbenthos=self.webpackChunkbenthos||[]).push([[56417],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return h}});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function d(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),s=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=s(e.components);return r.createElement(o.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),u=s(a),c=n,h=u["".concat(o,".").concat(c)]||u[c]||m[c]||l;return a?r.createElement(h,i(i({ref:t},p),{},{components:a})):r.createElement(h,i({ref:t},p))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=c;var d={};for(var o in t)hasOwnProperty.call(t,o)&&(d[o]=t[o]);d.originalType=e,d[u]="string"==typeof e?e:n,i[1]=d;for(var s=2;s<l;s++)i[s]=a[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},78173:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return o},default:function(){return c},frontMatter:function(){return d},metadata:function(){return s},toc:function(){return u}});var r=a(87462),n=a(63366),l=(a(67294),a(3905)),i=["components"],d={sidebar_label:"Add users",title:"Add users"},o=void 0,s={unversionedId:"platform_concepts/engagement/cdp/user_data/add_user_overview",id:"platform_concepts/engagement/cdp/user_data/add_user_overview",title:"Add users",description:"1. Overview",source:"@site/docs/platform_concepts/engagement/cdp/user_data/add_user_overview.md",sourceDirName:"platform_concepts/engagement/cdp/user_data",slug:"/platform_concepts/engagement/cdp/user_data/add_user_overview",permalink:"/docs/platform_concepts/engagement/cdp/user_data/add_user_overview",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Add users",title:"Add users"},sidebar:"platform_concepts",previous:{title:"User properties",permalink:"/docs/platform_concepts/engagement/cdp/user_data/user_properties"},next:{title:"Add individual users",permalink:"/docs/platform_concepts/engagement/cdp/user_data/add_users"}},p={},u=[{value:"1. Overview",id:"1-overview",level:2},{value:"1.1 User types",id:"11-user-types",level:3},{value:"1. Unidentified users",id:"1-unidentified-users",level:4},{value:"2. Identified users",id:"2-identified-users",level:4},{value:"Example of how records are created/updated based on the availability of userId",id:"example-of-how-records-are-createdupdated-based-on-the-availability-of-userid",level:4},{value:"1.2 Behaviour of two records when userId matches",id:"12-behaviour-of-two-records-when-userid-matches",level:3},{value:"Old user record",id:"old-user-record",level:4},{value:"New user record",id:"new-user-record",level:4},{value:"Merged record",id:"merged-record",level:4},{value:"2. Different ways of adding users",id:"2-different-ways-of-adding-users",level:2}],m={toc:u};function c(e){var t=e.components,a=(0,n.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"1-overview"},"1. Overview"),(0,l.kt)("p",null,"A user will have a unique identifier, ",(0,l.kt)("inlineCode",{parentName:"p"},"userId")," mapped to the record. When adding users, keep in mind that no two user records  have the same ",(0,l.kt)("inlineCode",{parentName:"p"},"userId"),". Know more about ",(0,l.kt)("a",{parentName:"p",href:"/docs/platform_concepts/engagement/cdp/user_data/user_properties#13-user-id-userid-as-a-property"},"userId")," and it\u2019s importance."),(0,l.kt)("h3",{id:"11-user-types"},"1.1 User types"),(0,l.kt)("p",null,"Users are categorised into two types on basis of the availability of their data in our system:"),(0,l.kt)("h4",{id:"1-unidentified-users"},"1. Unidentified users"),(0,l.kt)("p",null,"Users who are not registered or whose ",(0,l.kt)("inlineCode",{parentName:"p"},"userId")," is not added in Yellow.ai.\t"),(0,l.kt)("p",null,"An unidentified user is an individual whose ",(0,l.kt)("inlineCode",{parentName:"p"},"userId")," is not captured in our system. For a new user on a channel, when a user property other than ",(0,l.kt)("inlineCode",{parentName:"p"},"userId")," is captured, a record is created in User 360."),(0,l.kt)("p",null,"For example, the moment name is captured, a record is created in User 360 and maps the ongoing session to the record."),(0,l.kt)("img",{src:"https://i.imgur.com/k35p40f.png",width:"80%"}),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("strong",{parentName:"p"},"userId")," is also available as a property under ",(0,l.kt)("strong",{parentName:"p"},"User Properties")," of  ",(0,l.kt)("strong",{parentName:"p"},"Studio")," > ",(0,l.kt)("strong",{parentName:"p"},"Build"),".")),(0,l.kt)("h4",{id:"2-identified-users"},"2. Identified users"),(0,l.kt)("p",null,"These are registered users whose ",(0,l.kt)("a",{parentName:"p",href:"/docs/platform_concepts/engagement/cdp/user_data/user_properties#13-user-id-userid-as-a-property"},"userId")," is added in Yellow.ai. A record is created for each identified user in the users table. Any update made to the identified user through builder will show up in User 360."),(0,l.kt)("p",null,"You can update only identified users' data. Any data captured for Identified users is automatically updated in the Users table."),(0,l.kt)("p",null,"The session mapping changes when an existing ",(0,l.kt)("inlineCode",{parentName:"p"},"userId")," is provided."),(0,l.kt)("p",null,"For the session mentioned in the previous section, if the ",(0,l.kt)("inlineCode",{parentName:"p"},"userId")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"john@yellow.ai")," which does not exist in User 360, the ",(0,l.kt)("inlineCode",{parentName:"p"},"userId")," of the session will be updated without changing the mapping."),(0,l.kt)("img",{src:"https://secure-res.craft.do/v2/WvXLj9MBoxwsE1JhYdg5yCRjnyWs6uzQFF5i9xuHdDFzqh7sYqt3Rxr7pB68h7BeZhVVPU5iyTT9SaFto6iN7CoxM68rVUsJbhVTgb947xypNtqo1s3MWEsC8zCsa12quWXVsHx46LoJ3jLpN3CfqDCovop7ENkfwyCyDNpCEmPPvqik9YTHqNrwLrkfHqktxjo6ZD3VhoYdAxbup34V4gUQw5o2mPL8n6jDYhorDfBmqwY5ENzPrwdsSvn6L7Cw2e7MVh8QTgLDEYNmFa5Y24Fg6439hMqU1YtvuGk9Ag8B2cNj72/Image.jpg",width:"80%"}),(0,l.kt)("p",null,"If the ",(0,l.kt)("inlineCode",{parentName:"p"},"userId")," (say, ",(0,l.kt)("a",{parentName:"p",href:"mailto:adam@yellow.ai"},"adam@yellow.ai"),") already exists, the current session will be mapped to the existing record and it\u2019s properties will be refreshed with the values available in the record."),(0,l.kt)("img",{src:"https://secure-res.craft.do/v2/WvXLj9MBoxwsE1JhYdg5yCRjnyWs6uzQFF5i9xuHdDFzqh7sYqt3Rxr7pB68h7BeZhVVPU5iyTT9SaFto6iN7CoxM68rVUsJbhVTgb947xypNtqo1s3MWEsC8zCsa12quWXVsHx46LoJ3jLpN3CfqDCowLVqsYQnENyjT2hddNejsC5xzh2MmP8AiEK2sEJWGVSYLjEWVAdBsgevad1WU5xQjGBf78caLXZxsRmLX8Y6MDasCCPp4MBV1Bpu6Go8jJA9gsNscVBiMgCWHL222hHxL7p8N2PKsvheEqwV9AWKGyrDDJ/Image.jpg",width:"80%"}),(0,l.kt)("h4",{id:"example-of-how-records-are-createdupdated-based-on-the-availability-of-userid"},"Example of how records are created/updated based on the availability of userId"),(0,l.kt)("p",null," The following example shows how the details are mapped based on the ",(0,l.kt)("inlineCode",{parentName:"p"},"userId")," availability."),(0,l.kt)("p",null," ",(0,l.kt)("strong",{parentName:"p"},"Unidentified record")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"userId"),(0,l.kt)("th",{parentName:"tr",align:null},"firstName"),(0,l.kt)("th",{parentName:"tr",align:null},"whatsAppOptin"),(0,l.kt)("th",{parentName:"tr",align:null},"deviceToken"),(0,l.kt)("th",{parentName:"tr",align:null},"Tag"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"Jim"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"(123,456)"),(0,l.kt)("td",{parentName:"tr",align:null},"(t1,t3)")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Identified record")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"userId"),(0,l.kt)("th",{parentName:"tr",align:null},"firstName"),(0,l.kt)("th",{parentName:"tr",align:null},"whatsAppOptin"),(0,l.kt)("th",{parentName:"tr",align:null},"deviceToken"),(0,l.kt)("th",{parentName:"tr",align:null},"Tag"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"mailto:jim@example.com"},"jim@example.com")),(0,l.kt)("td",{parentName:"tr",align:null},"Jim"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"789"),(0,l.kt)("td",{parentName:"tr",align:null},"(t1,t2)")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Result record")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"userId"),(0,l.kt)("th",{parentName:"tr",align:null},"firstName"),(0,l.kt)("th",{parentName:"tr",align:null},"whatsAppOptin"),(0,l.kt)("th",{parentName:"tr",align:null},"deviceToken"),(0,l.kt)("th",{parentName:"tr",align:null},"Tag"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"mailto:jim@example.com"},"jim@example.com")),(0,l.kt)("td",{parentName:"tr",align:null},"Jim"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"(123,456,789)"),(0,l.kt)("td",{parentName:"tr",align:null},"(t1,t2,t3)")))),(0,l.kt)("h3",{id:"12-behaviour-of-two-records-when-userid-matches"},"1.2 Behaviour of two records when userId matches"),(0,l.kt)("p",null,"When you add a user a ",(0,l.kt)("inlineCode",{parentName:"p"},"userId")," that already exists in the users table, a conflict arises between the old record and the new record. The new record is merged into the old record in the following manner:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Existing values of the user will be updated with the new record values."),(0,l.kt)("li",{parentName:"ul"},"Properties not provided for the new record, will be retained for the older record.")),(0,l.kt)("p",null,"Here is an example for better understanding:"),(0,l.kt)("h4",{id:"old-user-record"},"Old user record"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"userId"),(0,l.kt)("th",{parentName:"tr",align:null},"firstName"),(0,l.kt)("th",{parentName:"tr",align:null},"email"),(0,l.kt)("th",{parentName:"tr",align:null},"phone"),(0,l.kt)("th",{parentName:"tr",align:null},"tags"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"123"),(0,l.kt)("td",{parentName:"tr",align:null},"Sarthak"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"mailto:sarthak@example.ai"},"sarthak@example.ai")),(0,l.kt)("td",{parentName:"tr",align:null},"919999999999"),(0,l.kt)("td",{parentName:"tr",align:null},"tag1,tag2")))),(0,l.kt)("h4",{id:"new-user-record"},"New user record"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"userId"),(0,l.kt)("th",{parentName:"tr",align:null},"firstName"),(0,l.kt)("th",{parentName:"tr",align:null},"email"),(0,l.kt)("th",{parentName:"tr",align:null},"phone"),(0,l.kt)("th",{parentName:"tr",align:null},"tags"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"123"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"918888888888"),(0,l.kt)("td",{parentName:"tr",align:null},"tag3,tag4")))),(0,l.kt)("h4",{id:"merged-record"},"Merged record"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"userId"),(0,l.kt)("th",{parentName:"tr",align:null},"firstName"),(0,l.kt)("th",{parentName:"tr",align:null},"email"),(0,l.kt)("th",{parentName:"tr",align:null},"phone"),(0,l.kt)("th",{parentName:"tr",align:null},"tags"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"123"),(0,l.kt)("td",{parentName:"tr",align:null},"Sarthak"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"mailto:sarthak@example.com"},"sarthak@example.com")),(0,l.kt)("td",{parentName:"tr",align:null},"918888888888"),(0,l.kt)("td",{parentName:"tr",align:null},"tag3,tag4")))),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Sometimes you might notice that the exact number of records you imported through CSV won't show up in the users table. This could be because some of the records being imported were merged with existing records.")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"2-different-ways-of-adding-users"},"2. Different ways of adding users"),(0,l.kt)("p",null,"The platform provides different ways to add your users. You can add each user manually or leverage advanced features to quickly create your user base and maintain it in real time."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"/docs/platform_concepts/engagement/cdp/user_data/add_users"},"Add individual users through User 360"),"."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"/docs/platform_concepts/engagement/cdp/user_data/import_users"},"Import users directly from a CSV"),"."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"/docs/platform_concepts/engagement/cdp/enriching_user_profiles/send_user_data_event_rest_api"},"Use our REST APIs to add or modify users real time"),"."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"/docs/platform_concepts/engagement/cdp/user_data/conv_in_builder"},"Use Bot Builder to create and update users"),".")))}c.isMDXComponent=!0}}]);