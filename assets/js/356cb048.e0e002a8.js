"use strict";(self.webpackChunkbenthos=self.webpackChunkbenthos||[]).push([[9355],{3905:function(t,e,n){n.d(e,{Zo:function(){return c},kt:function(){return m}});var i=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,i,a=function(t,e){if(null==t)return{};var n,i,a={},o=Object.keys(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var p=i.createContext({}),s=function(t){var e=i.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):r(r({},e),t)),n},c=function(t){var e=s(t.components);return i.createElement(p.Provider,{value:e},t.children)},u="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return i.createElement(i.Fragment,{},e)}},f=i.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,p=t.parentName,c=l(t,["components","mdxType","originalType","parentName"]),u=s(n),f=a,m=u["".concat(p,".").concat(f)]||u[f]||d[f]||o;return n?i.createElement(m,r(r({ref:e},c),{},{components:n})):i.createElement(m,r({ref:e},c))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,r=new Array(o);r[0]=f;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=t,l[u]="string"==typeof t?t:a,r[1]=l;for(var s=2;s<o;s++)r[s]=n[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}f.displayName="MDXCreateElement"},45307:function(t,e,n){n.r(e),n.d(e,{assets:function(){return c},contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var i=n(87462),a=n(63366),o=(n(67294),n(3905)),r=["components"],l={title:"iOS push notifications",sidebar_label:"iOS push notifications"},p=void 0,s={unversionedId:"platform_concepts/channelConfiguration/ios_push",id:"platform_concepts/channelConfiguration/ios_push",title:"iOS push notifications",description:"1. Set up push notifications for iOS apps",source:"@site/docs/platform_concepts/channelConfiguration/ios_push.md",sourceDirName:"platform_concepts/channelConfiguration",slug:"/platform_concepts/channelConfiguration/ios_push",permalink:"/docs/platform_concepts/channelConfiguration/ios_push",draft:!1,tags:[],version:"current",frontMatter:{title:"iOS push notifications",sidebar_label:"iOS push notifications"}},c={},u=[{value:"1. Set up push notifications for iOS apps",id:"1-set-up-push-notifications-for-ios-apps",level:2},{value:"Step 1: Create APNs private key",id:"step-1-create-apns-private-key",level:3},{value:"Step 2: Upload APNs private key on Yellow.ai",id:"step-2-upload-apns-private-key-on-yellowai",level:3},{value:"2. Code snippets for iOS Push notifications",id:"2-code-snippets-for-ios-push-notifications",level:2},{value:"2.1 Notification without custom action",id:"21-notification-without-custom-action",level:3},{value:"2.2 Notification with Deep-link:",id:"22-notification-with-deep-link",level:3},{value:"2.3 Notification with bot response",id:"23-notification-with-bot-response",level:3},{value:"2.4 Extract parameters from notifications",id:"24-extract-parameters-from-notifications",level:3},{value:"2.5 Handle image notifications",id:"25-handle-image-notifications",level:3}],d={toc:u};function f(t){var e=t.components,n=(0,a.Z)(t,r);return(0,o.kt)("wrapper",(0,i.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"1-set-up-push-notifications-for-ios-apps"},"1. Set up push notifications for iOS apps"),(0,o.kt)("p",null,"To send push notifications on your iOS app using Yellow.ai, you must have a Apple Push Notification (APN) account configured with the app and upload the key file in Yellow.ai."),(0,o.kt)("h3",{id:"step-1-create-apns-private-key"},"Step 1: Create APNs private key"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Download the private key (.p8 file) with APNs enabled using these ",(0,o.kt)("a",{parentName:"li",href:"https://developer.apple.com/help/account/"},"instructions"),".  Alternatively, you can also use an existing private key with APNs enabled.")),(0,o.kt)("h3",{id:"step-2-upload-apns-private-key-on-yellowai"},"Step 2: Upload APNs private key on Yellow.ai"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Go to ",(0,o.kt)("strong",{parentName:"li"},"Channels")," > ",(0,o.kt)("strong",{parentName:"li"},"Push Notifications")," > ",(0,o.kt)("strong",{parentName:"li"},"iOS  (APNs)"),"."),(0,o.kt)("li",{parentName:"ol"},"Click ",(0,o.kt)("strong",{parentName:"li"},"Upload")," and choose the .p8 file that you created."),(0,o.kt)("li",{parentName:"ol"},"Enter the ",(0,o.kt)("em",{parentName:"li"},"Key ID"),", the Bundle ID and the Apple Team ID from the previous step."),(0,o.kt)("li",{parentName:"ol"},"Click ",(0,o.kt)("strong",{parentName:"li"},"Add")," to upload")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://secure-res.craft.do/v2/MXpitnt98nfq77xcERfHs5nKdeJUqQ42x1Paqh34KHvmo25ikVQryimMtxX8fAdU1SBcf9ZSL7SHduNiC1QsYBiwvFXXGgrEXzBXsR66jC14o7djEPtQKjWC2ZNyUmiYiYVsjd8UCUPNBKyRSKiXH3phczPr5qEBBoRoSV3iqCoFycXWFy15mVNCUZX1Adjze6y7ZKhWDgfpAD1441wesaaVVXcax81jmqN8N5cSPaSqPm19dLwQUjSGuofoMCvsVwi5P5tha29zHoQWcocWjaZXU4E41UbPy5C3aLWBEYofj9D5Wt/Image.jpg",alt:null})),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"To know how to create a push notification campaign, see ",(0,o.kt)("a",{parentName:"p",href:"/docs/platform_concepts/engagement/outbound/templates/mobilepush"},"Mobile push template"),".")),(0,o.kt)("h2",{id:"2-code-snippets-for-ios-push-notifications"},"2. Code snippets for iOS Push notifications"),(0,o.kt)("p",null,"The following table provides descriptions of different parameters in the code snippets:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,o.kt)("th",{parentName:"tr",align:null},"Datatype"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"title"),(0,o.kt)("td",{parentName:"tr",align:null},"String"),(0,o.kt)("td",{parentName:"tr",align:null},"Title of the notification.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"body"),(0,o.kt)("td",{parentName:"tr",align:null},"String"),(0,o.kt)("td",{parentName:"tr",align:null},"Content of the notification.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"payload"),(0,o.kt)("td",{parentName:"tr",align:null},"String"),(0,o.kt)("td",{parentName:"tr",align:null},"Additional parameters such as image, botId, deep-link and journeySlug.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"botId"),(0,o.kt)("td",{parentName:"tr",align:null},"String"),(0,o.kt)("td",{parentName:"tr",align:null},"The bot ID for which the notification has been triggered.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"image"),(0,o.kt)("td",{parentName:"tr",align:null},"String"),(0,o.kt)("td",{parentName:"tr",align:null},"The path to the image file or a URL of the image.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"deeplink"),(0,o.kt)("td",{parentName:"tr",align:null},"String"),(0,o.kt)("td",{parentName:"tr",align:null},"URL which redirects the user to a particular page of the iOS application.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"journeySlug"),(0,o.kt)("td",{parentName:"tr",align:null},"String"),(0,o.kt)("td",{parentName:"tr",align:null},"The journey which has to be triggered in the bot, when the user taps on the notification.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"contentAvailable"),(0,o.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,o.kt)("td",{parentName:"tr",align:null},"Whether to handle background notifications.")))),(0,o.kt)("h3",{id:"21-notification-without-custom-action"},"2.1 Notification without custom action"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n "topic": {bundleId},\n "contentAvailable": true,\n "title": "hey there",\n "body": "description",\n "payload": {\n "image": "{imageUrl}"\n }\n}\n')),(0,o.kt)("h3",{id:"22-notification-with-deep-link"},"2.2 Notification with Deep-link:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "topic": "{bundleId}",\n  "contentAvailable": true,\n  "title": "hey there",\n  "body": "description",\n  "payload": {\n    "image": "{imageUrl}",\n    "botId": "{botID}",\n    "deeplink": "{url}"\n  }\n}\n')),(0,o.kt)("h3",{id:"23-notification-with-bot-response"},"2.3 Notification with bot response"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "topic": "{bundleId}",\n  "contentAvailable": true,\n  "title": "hey there",\n  "body": "description",\n  "payload": {\n    "botId": "{botID}",\n    "image": "{imageUrl}",\n    "journeySlug": "slug"\n  }\n}\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"For code snippets in how to integrate Yellow Messenger bot, see the following:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.yellow.ai/docs/platform_concepts/mobile/chatbot/ios"},"iOS chatbot")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/yellowmessenger/YMChatbot-iOS-DemoApp"},"YM chatbot iOS demo app")))),(0,o.kt)("h3",{id:"24-extract-parameters-from-notifications"},"2.4 Extract parameters from notifications"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'class NotificationService: UNNotificationServiceExtension { \n  var contentHandler: ((UNNotificationContent) -> Void)? \n  var bestAttemptContent: UNMutableNotificationContent? \n\noverride func didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent) -> Void) { \nself.contentHandler = contentHandler bestAttemptContent = (request.content.mutableCopy() as? UNMutableNotificationContent)\n\n  let title = request.content.userInfo["title"]; \n  let body = request.content.userInfo["body"]; \n  let payload = request.content.userInfo["payload"]; \n  let botId = request.content.userInfo["payload"]["botId"]; \n  let image = request.content.userInfo["payload"]["image"]; \n  let journeySlug = request.content.userInfo["payload"]["journeySlug"]; \n  }\n}\n')),(0,o.kt)("h3",{id:"25-handle-image-notifications"},"2.5 Handle image notifications"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'import UserNotifications \nclass NotificationService: UNNotificationServiceExtension { \n   var contentHandler: ((UNNotificationContent) -> Void)? \n   var bestAttemptContent: UNMutableNotificationContent? \n\noverride func didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent) -> Void) { \n   self.contentHandler = contentHandler bestAttemptContent = (request.content.mutableCopy() as? UNMutableNotificationContent) if let  \n   bestAttemptContent = bestAttemptContent { // Modify the notification content here... bestAttemptContent.title = "\\(bestAttemptContent.title) [modified]" \n   var urlString:String? = nil if let urlImageString = request.content.userInfo["image"] as? String { \n   urlString = urlImageString \n} \n\nif urlString != nil, let fileUrl = URL(string: urlString!) { print("fileUrl: \\(fileUrl)") \n\n   guard let imageData = NSData(contentsOf: fileUrl) else { \n     contentHandler(bestAttemptContent) \n     return } \n   \n   guard let attachment = UNNotificationAttachment.saveImageToDisk(fileIdentifier: "image.jpg", data: imageData, options: nil) else { \n   print("error in UNNotificationAttachment.saveImageToDisk()") \n   contentHandler(bestAttemptContent) \n   return \n } \n   bestAttemptContent.attachments = [ attachment ] \n   } \n   contentHandler(bestAttemptContent) \n  } \n} \n\noverride func serviceExtensionTimeWillExpire() { \n// Called just before the extension will be terminated by the system. \n// Use this as an opportunity to deliver your "best attempt" at modified content, otherwise the original push payload will be used. \nif let contentHandler = contentHandler, let bestAttemptContent = bestAttemptContent { \n   contentHandler(bestAttemptContent) \n   } \n  } \n} \n\n@available(iOSApplicationExtension 10.0, *) \nextension UNNotificationAttachment { \nstatic func saveImageToDisk(fileIdentifier: String, data: NSData, options: [NSObject : AnyObject]?) -> UNNotificationAttachment? { \n  let fileManager = FileManager.default \n  let folderName = ProcessInfo.processInfo.globallyUniqueString \n  let folderURL = NSURL(fileURLWithPath: NSTemporaryDirectory()).appendingPathComponent(folderName, isDirectory: true) do { \n  try fileManager.createDirectory(at: folderURL!, withIntermediateDirectories: true, attributes: nil) \n  let fileURL = folderURL?.appendingPathComponent(fileIdentifier) \n  try data.write(to: fileURL!, options: []) \n  let attachment = try UNNotificationAttachment(identifier: fileIdentifier, url: fileURL!, options: options) \n  return attachment \n} \ncatch let error { \n  print("error \\(error)") \n } \n return nil \n } \n}\n')))}f.isMDXComponent=!0}}]);