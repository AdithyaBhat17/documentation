(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{220:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return b})),n.d(t,"default",(function(){return d}));var a=n(3),o=n(7),i=(n(0),n(411)),r=n(415),l=n(416),c={title:"awk",type:"processor",status:"stable",categories:["Mapping"]},s={unversionedId:"components/processors/awk",id:"components/processors/awk",isDocsHomePage:!1,title:"awk",description:"\x3c!--",source:"@site/docs/components/processors/awk.md",slug:"/components/processors/awk",permalink:"/docs/components/processors/awk",editUrl:"https://github.com/Jeffail/benthos/edit/master/website/docs/components/processors/awk.md",version:"current",sidebar:"docs",previous:{title:"avro",permalink:"/docs/components/processors/avro"},next:{title:"aws_lambda",permalink:"/docs/components/processors/aws_lambda"}},b=[{value:"Fields",id:"fields",children:[{value:"<code>codec</code>",id:"codec",children:[]},{value:"<code>program</code>",id:"program",children:[]},{value:"<code>parts</code>",id:"parts",children:[]}]},{value:"Examples",id:"examples",children:[]},{value:"Codecs",id:"codecs",children:[{value:"<code>none</code>",id:"none",children:[]},{value:"<code>text</code>",id:"text",children:[]},{value:"<code>json</code>",id:"json",children:[]}]},{value:"AWK Functions",id:"awk-functions",children:[{value:"<code>json_get</code>",id:"json_get",children:[]},{value:"<code>json_set</code>",id:"json_set",children:[]},{value:"<code>json_append</code>",id:"json_append",children:[]},{value:"<code>json_delete</code>",id:"json_delete",children:[]},{value:"<code>json_length</code>",id:"json_length",children:[]},{value:"<code>json_type</code>",id:"json_type",children:[]},{value:"<code>create_json_object</code>",id:"create_json_object",children:[]},{value:"<code>create_json_array</code>",id:"create_json_array",children:[]},{value:"<code>metadata_set</code>",id:"metadata_set",children:[]},{value:"<code>metadata_get</code>",id:"metadata_get",children:[]},{value:"<code>timestamp_unix</code>",id:"timestamp_unix",children:[]},{value:"<code>timestamp_unix</code>",id:"timestamp_unix-1",children:[]},{value:"<code>timestamp_unix</code>",id:"timestamp_unix-2",children:[]},{value:"<code>timestamp_unix_nano</code>",id:"timestamp_unix_nano",children:[]},{value:"<code>timestamp_unix_nano</code>",id:"timestamp_unix_nano-1",children:[]},{value:"<code>timestamp_unix_nano</code>",id:"timestamp_unix_nano-2",children:[]},{value:"<code>timestamp_format</code>",id:"timestamp_format",children:[]},{value:"<code>timestamp_format_nano</code>",id:"timestamp_format_nano",children:[]},{value:"<code>print_log</code>",id:"print_log",children:[]}]}],p={toc:b};function d(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Executes an AWK program on messages. This processor is very powerful as it\noffers a range of ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#awk-functions"}),"custom functions")," for querying and mutating\nmessage contents and metadata."),Object(i.b)(r.a,{defaultValue:"common",values:[{label:"Common",value:"common"},{label:"Advanced",value:"advanced"}],mdxType:"Tabs"},Object(i.b)(l.a,{value:"common",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"# Common config fields, showing default values\nawk:\n  codec: text\n  program: BEGIN { x = 0 } { print $0, x; x++ }\n"))),Object(i.b)(l.a,{value:"advanced",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"# All config fields, showing default values\nawk:\n  codec: text\n  program: BEGIN { x = 0 } { print $0, x; x++ }\n  parts: []\n")))),Object(i.b)("p",null,"Works by feeding message contents as the program input based on a chosen\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#codecs"}),"codec")," and replaces the contents of each message with the result. If\nthe result is empty (nothing is printed by the program) then the original\nmessage contents remain unchanged."),Object(i.b)("p",null,"Comes with a wide range of ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#awk-functions"}),"custom functions")," for accessing\nmessage metadata, json fields, printing logs, etc. These functions can be\noverridden by functions within the program."),Object(i.b)("p",null,"Check out the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#examples"}),"examples section")," in order to see how this processor\ncan be used."),Object(i.b)("p",null,"This processor uses ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/benhoyt/goawk"}),"GoAWK"),", in order to understand the differences\nin how the program works you can ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/benhoyt/goawk#differences-from-awk"}),"read more about it here"),"."),Object(i.b)("h2",{id:"fields"},"Fields"),Object(i.b)("h3",{id:"codec"},Object(i.b)("inlineCode",{parentName:"h3"},"codec")),Object(i.b)("p",null,"A ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#codecs"}),"codec")," defines how messages should be inserted into the AWK program as variables. The codec does not change which ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#awk-functions"}),"custom Benthos functions")," are available. The ",Object(i.b)("inlineCode",{parentName:"p"},"text")," codec is the closest to a typical AWK use case."),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"string"),Object(i.b)("br",{parentName:"p"}),"\n","Default: ",Object(i.b)("inlineCode",{parentName:"p"},'"text"'),Object(i.b)("br",{parentName:"p"}),"\n","Options: ",Object(i.b)("inlineCode",{parentName:"p"},"none"),", ",Object(i.b)("inlineCode",{parentName:"p"},"text"),", ",Object(i.b)("inlineCode",{parentName:"p"},"json"),"."),Object(i.b)("h3",{id:"program"},Object(i.b)("inlineCode",{parentName:"h3"},"program")),Object(i.b)("p",null,"An AWK program to execute"),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"string"),Object(i.b)("br",{parentName:"p"}),"\n","Default: ",Object(i.b)("inlineCode",{parentName:"p"},'"BEGIN { x = 0 } { print $0, x; x++ }"'),"  "),Object(i.b)("h3",{id:"parts"},Object(i.b)("inlineCode",{parentName:"h3"},"parts")),Object(i.b)("p",null,"An optional array of message indexes of a batch that the processor should apply to.\nIf left empty all messages are processed. This field is only applicable when\nbatching messages ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/configuration/batching"}),"at the input level"),"."),Object(i.b)("p",null,"Indexes can be negative, and if so the part will be selected from the end\ncounting backwards starting from -1."),Object(i.b)("p",null,"Type: ",Object(i.b)("inlineCode",{parentName:"p"},"array"),Object(i.b)("br",{parentName:"p"}),"\n","Default: ",Object(i.b)("inlineCode",{parentName:"p"},"[]"),"  "),Object(i.b)("h2",{id:"examples"},"Examples"),Object(i.b)(r.a,{defaultValue:"JSON Mapping and Arithmetic",values:[{label:"JSON Mapping and Arithmetic",value:"JSON Mapping and Arithmetic"},{label:"Stuff With Arrays",value:"Stuff With Arrays"}],mdxType:"Tabs"},Object(i.b)(l.a,{value:"JSON Mapping and Arithmetic",mdxType:"TabItem"},Object(i.b)("p",null,"Because AWK is a full programming language it's much easier to map documents and\nperform arithmetic with it than with other Benthos processors. For example, if\nwe were expecting documents of the form:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{"doc":{"val1":5,"val2":10},"id":"1","type":"add"}\n{"doc":{"val1":5,"val2":10},"id":"2","type":"multiply"}\n')),Object(i.b)("p",null,"And we wished to perform the arithmetic specified in the ",Object(i.b)("inlineCode",{parentName:"p"},"type")," field,\non the values ",Object(i.b)("inlineCode",{parentName:"p"},"val1")," and ",Object(i.b)("inlineCode",{parentName:"p"},"val2")," and, finally, map the result into the\ndocument, giving us the following resulting documents:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{"doc":{"result":15,"val1":5,"val2":10},"id":"1","type":"add"}\n{"doc":{"result":50,"val1":5,"val2":10},"id":"2","type":"multiply"}\n')),Object(i.b)("p",null,"We can do that with the following:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'pipeline:\n  processors:\n  - awk:\n      program: |\n        function map_add_vals() {\n          json_set_int("doc.result", json_get("doc.val1") + json_get("doc.val2"));\n        }\n        function map_multiply_vals() {\n          json_set_int("doc.result", json_get("doc.val1") * json_get("doc.val2"));\n        }\n        function map_unknown(type) {\n          json_set("error","unknown document type");\n          print_log("Document type not recognised: " type, "ERROR");\n        }\n        {\n          type = json_get("type");\n          if (type == "add")\n            map_add_vals();\n          else if (type == "multiply")\n            map_multiply_vals();\n          else\n            map_unknown(type);\n        }\n'))),Object(i.b)(l.a,{value:"Stuff With Arrays",mdxType:"TabItem"},Object(i.b)("p",null,"It's possible to iterate JSON arrays by appending an index value to the path,\nthis can be used to do things like removing duplicates from arrays. For example,\ngiven the following input document:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{"path":{"to":{"foos":["one","two","three","two","four"]}}}\n')),Object(i.b)("p",null,"We could create a new array ",Object(i.b)("inlineCode",{parentName:"p"},"foos_unique")," from ",Object(i.b)("inlineCode",{parentName:"p"},"foos")," giving us the result:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{"path":{"to":{"foos":["one","two","three","two","four"],"foos_unique":["one","two","three","four"]}}}\n')),Object(i.b)("p",null,"With the following config:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'pipeline:\n  processors:\n  - awk:\n      program: |\n        {\n          array_path = "path.to.foos"\n          array_len = json_length(array_path)\n\n          for (i = 0; i < array_len; i++) {\n            ele = json_get(array_path "." i)\n            if ( ! ( ele in seen ) ) {\n              json_append(array_path "_unique", ele)\n              seen[ele] = 1\n            }\n          }\n        }\n')))),Object(i.b)("h2",{id:"codecs"},"Codecs"),Object(i.b)("p",null,"The chosen codec determines how the contents of the message are fed into the\nprogram. Codecs only impact the input string and variables initialised for your\nprogram, they do not change the range of custom functions available."),Object(i.b)("h3",{id:"none"},Object(i.b)("inlineCode",{parentName:"h3"},"none")),Object(i.b)("p",null,"An empty string is fed into the program. Functions can still be used in order to\nextract and mutate metadata and message contents."),Object(i.b)("p",null,"This is useful for when your program only uses functions and doesn't need the\nfull text of the message to be parsed by the program, as it is significantly\nfaster."),Object(i.b)("h3",{id:"text"},Object(i.b)("inlineCode",{parentName:"h3"},"text")),Object(i.b)("p",null,"The full contents of the message are fed into the program as a string, allowing\nyou to reference tokenised segments of the message with variables ($0, $1, etc).\nCustom functions can still be used with this codec."),Object(i.b)("p",null,"This is the default codec as it behaves most similar to typical usage of the awk\ncommand line tool."),Object(i.b)("h3",{id:"json"},Object(i.b)("inlineCode",{parentName:"h3"},"json")),Object(i.b)("p",null,"An empty string is fed into the program, and variables are automatically\ninitialised before execution of your program by walking the flattened JSON\nstructure. Each value is converted into a variable by taking its full path,\ne.g. the object:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    "foo": {\n        "bar": {\n            "value": 10\n        },\n        "created_at": "2018-12-18T11:57:32"\n    }\n}\n')),Object(i.b)("p",null,"Would result in the following variable declarations:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'foo_bar_value = 10\nfoo_created_at = "2018-12-18T11:57:32"\n')),Object(i.b)("p",null,"Custom functions can also still be used with this codec."),Object(i.b)("h2",{id:"awk-functions"},"AWK Functions"),Object(i.b)("h3",{id:"json_get"},Object(i.b)("inlineCode",{parentName:"h3"},"json_get")),Object(i.b)("p",null,"Signature: ",Object(i.b)("inlineCode",{parentName:"p"},"json_get(path)")),Object(i.b)("p",null,"Attempts to find a JSON value in the input message payload by a\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/configuration/field_paths"}),"dot separated path")," and returns it as a string."),Object(i.b)("h3",{id:"json_set"},Object(i.b)("inlineCode",{parentName:"h3"},"json_set")),Object(i.b)("p",null,"Signature: ",Object(i.b)("inlineCode",{parentName:"p"},"json_set(path, value)")),Object(i.b)("p",null,"Attempts to set a JSON value in the input message payload identified by a\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/configuration/field_paths"}),"dot separated path"),", the value argument will be interpreted\nas a string."),Object(i.b)("p",null,"In order to set non-string values use one of the following typed varieties:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"json_set_int(path, value)")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"json_set_float(path, value)")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"json_set_bool(path, value)"))),Object(i.b)("h3",{id:"json_append"},Object(i.b)("inlineCode",{parentName:"h3"},"json_append")),Object(i.b)("p",null,"Signature: ",Object(i.b)("inlineCode",{parentName:"p"},"json_append(path, value)")),Object(i.b)("p",null,"Attempts to append a value to an array identified by a\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/configuration/field_paths"}),"dot separated path"),". If the target does not\nexist it will be created. If the target exists but is not already an array then\nit will be converted into one, with its original contents set to the first\nelement of the array."),Object(i.b)("p",null,"The value argument will be interpreted as a string. In order to append\nnon-string values use one of the following typed varieties:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"json_append_int(path, value)")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"json_append_float(path, value)")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"json_append_bool(path, value)"))),Object(i.b)("h3",{id:"json_delete"},Object(i.b)("inlineCode",{parentName:"h3"},"json_delete")),Object(i.b)("p",null,"Signature: ",Object(i.b)("inlineCode",{parentName:"p"},"json_delete(path)")),Object(i.b)("p",null,"Attempts to delete a JSON field from the input message payload identified by a\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/configuration/field_paths"}),"dot separated path"),"."),Object(i.b)("h3",{id:"json_length"},Object(i.b)("inlineCode",{parentName:"h3"},"json_length")),Object(i.b)("p",null,"Signature: ",Object(i.b)("inlineCode",{parentName:"p"},"json_length(path)")),Object(i.b)("p",null,"Returns the size of the string or array value of JSON field from the input\nmessage payload identified by a ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/configuration/field_paths"}),"dot separated path"),"."),Object(i.b)("p",null,"If the target field does not exist, or is not a string or array type, then zero\nis returned. In order to explicitly check the type of a field use ",Object(i.b)("inlineCode",{parentName:"p"},"json_type"),"."),Object(i.b)("h3",{id:"json_type"},Object(i.b)("inlineCode",{parentName:"h3"},"json_type")),Object(i.b)("p",null,"Signature: ",Object(i.b)("inlineCode",{parentName:"p"},"json_type(path)")),Object(i.b)("p",null,"Returns the type of a JSON field from the input message payload identified by a\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/configuration/field_paths"}),"dot separated path"),"."),Object(i.b)("p",null,'Possible values are: "string", "int", "float", "bool", "undefined", "null",\n"array", "object".'),Object(i.b)("h3",{id:"create_json_object"},Object(i.b)("inlineCode",{parentName:"h3"},"create_json_object")),Object(i.b)("p",null,"Signature: ",Object(i.b)("inlineCode",{parentName:"p"},"create_json_object(key1, val1, key2, val2, ...)")),Object(i.b)("p",null,"Generates a valid JSON object of key value pair arguments. The arguments are\nvariadic, meaning any number of pairs can be listed. The value will always\nresolve to a string regardless of the value type. E.g. the following call:"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},'create_json_object("a", "1", "b", 2, "c", "3")')),Object(i.b)("p",null,"Would result in this string:"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},'{"a":"1","b":"2","c":"3"}')),Object(i.b)("h3",{id:"create_json_array"},Object(i.b)("inlineCode",{parentName:"h3"},"create_json_array")),Object(i.b)("p",null,"Signature: ",Object(i.b)("inlineCode",{parentName:"p"},"create_json_array(val1, val2, ...)")),Object(i.b)("p",null,"Generates a valid JSON array of value arguments. The arguments are variadic,\nmeaning any number of values can be listed. The value will always resolve to a\nstring regardless of the value type. E.g. the following call:"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},'create_json_array("1", 2, "3")')),Object(i.b)("p",null,"Would result in this string:"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},'["1","2","3"]')),Object(i.b)("h3",{id:"metadata_set"},Object(i.b)("inlineCode",{parentName:"h3"},"metadata_set")),Object(i.b)("p",null,"Signature: ",Object(i.b)("inlineCode",{parentName:"p"},"metadata_set(key, value)")),Object(i.b)("p",null,"Set a metadata key for the message to a value. The value will always resolve to\na string regardless of the value type."),Object(i.b)("h3",{id:"metadata_get"},Object(i.b)("inlineCode",{parentName:"h3"},"metadata_get")),Object(i.b)("p",null,"Signature: ",Object(i.b)("inlineCode",{parentName:"p"},"metadata_get(key) string")),Object(i.b)("p",null,"Get the value of a metadata key from the message."),Object(i.b)("h3",{id:"timestamp_unix"},Object(i.b)("inlineCode",{parentName:"h3"},"timestamp_unix")),Object(i.b)("p",null,"Signature: ",Object(i.b)("inlineCode",{parentName:"p"},"timestamp_unix() int")),Object(i.b)("p",null,"Returns the current unix timestamp (the number of seconds since 01-01-1970)."),Object(i.b)("h3",{id:"timestamp_unix-1"},Object(i.b)("inlineCode",{parentName:"h3"},"timestamp_unix")),Object(i.b)("p",null,"Signature: ",Object(i.b)("inlineCode",{parentName:"p"},"timestamp_unix(date) int")),Object(i.b)("p",null,"Attempts to parse a date string by detecting its format and returns the\nequivalent unix timestamp (the number of seconds since 01-01-1970)."),Object(i.b)("h3",{id:"timestamp_unix-2"},Object(i.b)("inlineCode",{parentName:"h3"},"timestamp_unix")),Object(i.b)("p",null,"Signature: ",Object(i.b)("inlineCode",{parentName:"p"},"timestamp_unix(date, format) int")),Object(i.b)("p",null,"Attempts to parse a date string according to a format and returns the equivalent\nunix timestamp (the number of seconds since 01-01-1970)."),Object(i.b)("p",null,"The format is defined by showing how the reference time, defined to be\n",Object(i.b)("inlineCode",{parentName:"p"},"Mon Jan 2 15:04:05 -0700 MST 2006")," would be displayed if it were the value."),Object(i.b)("h3",{id:"timestamp_unix_nano"},Object(i.b)("inlineCode",{parentName:"h3"},"timestamp_unix_nano")),Object(i.b)("p",null,"Signature: ",Object(i.b)("inlineCode",{parentName:"p"},"timestamp_unix_nano() int")),Object(i.b)("p",null,"Returns the current unix timestamp in nanoseconds (the number of nanoseconds\nsince 01-01-1970)."),Object(i.b)("h3",{id:"timestamp_unix_nano-1"},Object(i.b)("inlineCode",{parentName:"h3"},"timestamp_unix_nano")),Object(i.b)("p",null,"Signature: ",Object(i.b)("inlineCode",{parentName:"p"},"timestamp_unix_nano(date) int")),Object(i.b)("p",null,"Attempts to parse a date string by detecting its format and returns the\nequivalent unix timestamp in nanoseconds (the number of nanoseconds since\n01-01-1970)."),Object(i.b)("h3",{id:"timestamp_unix_nano-2"},Object(i.b)("inlineCode",{parentName:"h3"},"timestamp_unix_nano")),Object(i.b)("p",null,"Signature: ",Object(i.b)("inlineCode",{parentName:"p"},"timestamp_unix_nano(date, format) int")),Object(i.b)("p",null,"Attempts to parse a date string according to a format and returns the equivalent\nunix timestamp in nanoseconds (the number of nanoseconds since 01-01-1970)."),Object(i.b)("p",null,"The format is defined by showing how the reference time, defined to be\n",Object(i.b)("inlineCode",{parentName:"p"},"Mon Jan 2 15:04:05 -0700 MST 2006")," would be displayed if it were the value."),Object(i.b)("h3",{id:"timestamp_format"},Object(i.b)("inlineCode",{parentName:"h3"},"timestamp_format")),Object(i.b)("p",null,"Signature: ",Object(i.b)("inlineCode",{parentName:"p"},"timestamp_format(unix, format) string")),Object(i.b)("p",null,"Formats a unix timestamp. The format is defined by showing how the reference\ntime, defined to be ",Object(i.b)("inlineCode",{parentName:"p"},"Mon Jan 2 15:04:05 -0700 MST 2006")," would be displayed if it\nwere the value."),Object(i.b)("p",null,"The format is optional, and if omitted RFC3339 (",Object(i.b)("inlineCode",{parentName:"p"},"2006-01-02T15:04:05Z07:00"),")\nwill be used."),Object(i.b)("h3",{id:"timestamp_format_nano"},Object(i.b)("inlineCode",{parentName:"h3"},"timestamp_format_nano")),Object(i.b)("p",null,"Signature: ",Object(i.b)("inlineCode",{parentName:"p"},"timestamp_format_nano(unixNano, format) string")),Object(i.b)("p",null,"Formats a unix timestamp in nanoseconds. The format is defined by showing how\nthe reference time, defined to be ",Object(i.b)("inlineCode",{parentName:"p"},"Mon Jan 2 15:04:05 -0700 MST 2006")," would be\ndisplayed if it were the value."),Object(i.b)("p",null,"The format is optional, and if omitted RFC3339 (",Object(i.b)("inlineCode",{parentName:"p"},"2006-01-02T15:04:05Z07:00"),")\nwill be used."),Object(i.b)("h3",{id:"print_log"},Object(i.b)("inlineCode",{parentName:"h3"},"print_log")),Object(i.b)("p",null,"Signature: ",Object(i.b)("inlineCode",{parentName:"p"},"print_log(message, level)")),Object(i.b)("p",null,"Prints a Benthos log message at a particular log level. The log level is\noptional, and if omitted the level ",Object(i.b)("inlineCode",{parentName:"p"},"INFO")," will be used."))}d.isMDXComponent=!0},411:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var a=n(0),o=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),b=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=b(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},u=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=b(n),u=a,m=p["".concat(r,".").concat(u)]||p[u]||d[u]||i;return n?o.a.createElement(m,l(l({ref:t},s),{},{components:n})):o.a.createElement(m,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var s=2;s<i;s++)r[s]=n[s];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},412:function(e,t,n){"use strict";function a(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}t.a=function(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(o&&(o+=" "),o+=t);return o}},413:function(e,t,n){"use strict";var a=n(0),o=n(414);t.a=function(){var e=Object(a.useContext)(o.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},414:function(e,t,n){"use strict";var a=n(0),o=Object(a.createContext)(void 0);t.a=o},415:function(e,t,n){"use strict";var a=n(0),o=n.n(a),i=n(413),r=n(412),l=n(56),c=n.n(l),s=37,b=39;t.a=function(e){var t=e.lazy,n=e.block,l=e.defaultValue,p=e.values,d=e.groupId,u=e.className,m=Object(i.a)(),j=m.tabGroupChoices,h=m.setTabGroupChoices,f=Object(a.useState)(l),O=f[0],g=f[1],v=a.Children.toArray(e.children);if(null!=d){var _=j[d];null!=_&&_!==O&&p.some((function(e){return e.value===_}))&&g(_)}var y=function(e){g(e),null!=d&&h(d,e)},N=[];return o.a.createElement("div",null,o.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(r.a)("tabs",{"tabs--block":n},u)},p.map((function(e){var t=e.value,n=e.label;return o.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":O===t,className:Object(r.a)("tabs__item",c.a.tabItem,{"tabs__item--active":O===t}),key:t,ref:function(e){return N.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case b:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case s:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(N,e.target,e)},onFocus:function(){return y(t)},onClick:function(){y(t)}},n)}))),t?Object(a.cloneElement)(v.filter((function(e){return e.props.value===O}))[0],{className:"margin-vert--md"}):o.a.createElement("div",{className:"margin-vert--md"},v.map((function(e,t){return Object(a.cloneElement)(e,{key:t,hidden:e.props.value!==O})}))))}},416:function(e,t,n){"use strict";var a=n(3),o=n(0),i=n.n(o);t.a=function(e){var t=e.children,n=e.hidden,o=e.className;return i.a.createElement("div",Object(a.a)({role:"tabpanel"},{hidden:n,className:o}),t)}}}]);