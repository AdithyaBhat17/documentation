(window.webpackJsonp=window.webpackJsonp||[]).push([[252],{329:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return i})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return s}));var n=a(3),o=a(7),r=(a(0),a(411)),l=(a(415),a(416),{title:"Bloblang Methods",sidebar_label:"Methods",description:"A list of Bloblang methods"}),i={unversionedId:"guides/bloblang/methods",id:"guides/bloblang/methods",isDocsHomePage:!1,title:"Bloblang Methods",description:"A list of Bloblang methods",source:"@site/docs/guides/bloblang/methods.md",slug:"/guides/bloblang/methods",permalink:"/docs/guides/bloblang/methods",editUrl:"https://github.com/Jeffail/benthos/edit/master/website/docs/guides/bloblang/methods.md",version:"current",sidebar_label:"Methods",sidebar:"docs",previous:{title:"Bloblang Functions",permalink:"/docs/guides/bloblang/functions"},next:{title:"Advanced Bloblang",permalink:"/docs/guides/bloblang/advanced"}},c=[{value:"General",id:"general",children:[{value:"<code>apply</code>",id:"apply",children:[]},{value:"<code>catch</code>",id:"catch",children:[]},{value:"<code>exists</code>",id:"exists",children:[]},{value:"<code>from</code>",id:"from",children:[]},{value:"<code>from_all</code>",id:"from_all",children:[]},{value:"<code>or</code>",id:"or",children:[]}]},{value:"String Manipulation",id:"string-manipulation",children:[{value:"<code>contains</code>",id:"contains",children:[]},{value:"<code>length</code>",id:"length",children:[]},{value:"<code>slice</code>",id:"slice",children:[]},{value:"<code>capitalize</code>",id:"capitalize",children:[]},{value:"<code>escape_html</code>",id:"escape_html",children:[]},{value:"<code>unescape_html</code>",id:"unescape_html",children:[]},{value:"<code>escape_url_query</code>",id:"escape_url_query",children:[]},{value:"<code>unescape_url_query</code>",id:"unescape_url_query",children:[]},{value:"<code>filepath_join</code>",id:"filepath_join",children:[]},{value:"<code>filepath_split</code>",id:"filepath_split",children:[]},{value:"<code>format</code>",id:"format",children:[]},{value:"<code>has_prefix</code>",id:"has_prefix",children:[]},{value:"<code>has_suffix</code>",id:"has_suffix",children:[]},{value:"<code>uppercase</code>",id:"uppercase",children:[]},{value:"<code>lowercase</code>",id:"lowercase",children:[]},{value:"<code>quote</code>",id:"quote",children:[]},{value:"<code>unquote</code>",id:"unquote",children:[]},{value:"<code>replace</code>",id:"replace",children:[]},{value:"<code>replace_many</code>",id:"replace_many",children:[]},{value:"<code>split</code>",id:"split",children:[]},{value:"<code>strip_html</code>",id:"strip_html",children:[]},{value:"<code>trim</code>",id:"trim",children:[]}]},{value:"Number Manipulation",id:"number-manipulation",children:[{value:"<code>abs</code>",id:"abs",children:[]},{value:"<code>ceil</code>",id:"ceil",children:[]},{value:"<code>floor</code>",id:"floor",children:[]},{value:"<code>log</code>",id:"log",children:[]},{value:"<code>log10</code>",id:"log10",children:[]},{value:"<code>max</code>",id:"max",children:[]},{value:"<code>min</code>",id:"min",children:[]},{value:"<code>round</code>",id:"round",children:[]}]},{value:"Regular Expressions",id:"regular-expressions",children:[{value:"<code>re_find_all</code>",id:"re_find_all",children:[]},{value:"<code>re_find_all_submatch</code>",id:"re_find_all_submatch",children:[]},{value:"<code>re_find_object</code>",id:"re_find_object",children:[]},{value:"<code>re_find_all_object</code>",id:"re_find_all_object",children:[]},{value:"<code>re_match</code>",id:"re_match",children:[]},{value:"<code>re_replace</code>",id:"re_replace",children:[]}]},{value:"Timestamp Manipulation",id:"timestamp-manipulation",children:[{value:"<code>parse_timestamp_unix</code>",id:"parse_timestamp_unix",children:[]},{value:"<code>parse_timestamp</code>",id:"parse_timestamp",children:[]},{value:"<code>format_timestamp</code>",id:"format_timestamp",children:[]}]},{value:"Type Coercion",id:"type-coercion",children:[{value:"<code>not_null</code>",id:"not_null",children:[]},{value:"<code>bytes</code>",id:"bytes",children:[]},{value:"<code>string</code>",id:"string",children:[]},{value:"<code>bool</code>",id:"bool",children:[]},{value:"<code>not_empty</code>",id:"not_empty",children:[]},{value:"<code>number</code>",id:"number",children:[]},{value:"<code>type</code>",id:"type",children:[]}]},{value:"Object &amp; Array Manipulation",id:"object--array-manipulation",children:[{value:"<code>collapse</code>",id:"collapse",children:[]},{value:"<code>get</code>",id:"get",children:[]},{value:"<code>json_schema</code>",id:"json_schema",children:[]},{value:"<code>all</code>",id:"all",children:[]},{value:"<code>any</code>",id:"any",children:[]},{value:"<code>append</code>",id:"append",children:[]},{value:"<code>contains</code>",id:"contains-1",children:[]},{value:"<code>enumerated</code>",id:"enumerated",children:[]},{value:"<code>explode</code>",id:"explode",children:[]},{value:"<code>filter</code>",id:"filter",children:[]},{value:"<code>flatten</code>",id:"flatten",children:[]},{value:"<code>fold</code>",id:"fold",children:[]},{value:"<code>index</code>",id:"index",children:[]},{value:"<code>keys</code>",id:"keys",children:[]},{value:"<code>length</code>",id:"length-1",children:[]},{value:"<code>map_each</code>",id:"map_each",children:[]},{value:"<code>merge</code>",id:"merge",children:[]},{value:"<code>sort</code>",id:"sort",children:[]},{value:"<code>slice</code>",id:"slice-1",children:[]},{value:"<code>sum</code>",id:"sum",children:[]},{value:"<code>unique</code>",id:"unique",children:[]},{value:"<code>values</code>",id:"values",children:[]},{value:"<code>without</code>",id:"without",children:[]},{value:"<code>join</code>",id:"join",children:[]}]},{value:"Parsing",id:"parsing",children:[{value:"<code>parse_csv</code>",id:"parse_csv",children:[]},{value:"<code>parse_json</code>",id:"parse_json",children:[]},{value:"<code>parse_xml</code>",id:"parse_xml",children:[]}]},{value:"Encoding and Encryption",id:"encoding-and-encryption",children:[{value:"<code>encode</code>",id:"encode",children:[]},{value:"<code>decode</code>",id:"decode",children:[]},{value:"<code>encrypt_aes</code>",id:"encrypt_aes",children:[]},{value:"<code>decrypt_aes</code>",id:"decrypt_aes",children:[]},{value:"<code>hash</code>",id:"hash",children:[]}]}],b={toc:c};function s(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Methods provide most of the power in Bloblang as they allow you to augment values and can be added to any expression (including other methods):"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.doc.id = this.thing.id.string().catch(uuid_v4())\nroot.doc.reduced_nums = this.thing.nums.for_each(\n  match this {\n    this < 10 => deleted()\n    _ => this - 10\n  }\n)\nroot.has_good_taste = ["pikachu","mewtwo","magmar"].contains(\n  this.user.fav_pokemon\n)\n')),Object(r.b)("h2",{id:"general"},"General"),Object(r.b)("h3",{id:"apply"},Object(r.b)("inlineCode",{parentName:"h3"},"apply")),Object(r.b)("p",null,"Apply a declared map on a value."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'map thing {\n  root.inner = this.first\n}\n\nroot.foo = this.doc.apply("thing")\n\n# In:  {"doc":{"first":"hello world"}}\n# Out: {"foo":{"inner":"hello world"}}\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'map create_foo {\n  root.name = "a foo"\n  root.purpose = "to be a foo"\n}\n\nroot = this\nroot.foo = null.apply("create_foo")\n\n# In:  {"id":"1234"}\n# Out: {"foo":{"name":"a foo","purpose":"to be a foo"},"id":"1234"}\n')),Object(r.b)("h3",{id:"catch"},Object(r.b)("inlineCode",{parentName:"h3"},"catch")),Object(r.b)("p",null,"If the result of a target query fails (due to incorrect types, failed parsing, etc) the argument is returned instead."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),"root.doc.id = this.thing.id.string().catch(uuid_v4())\n")),Object(r.b)("h3",{id:"exists"},Object(r.b)("inlineCode",{parentName:"h3"},"exists")),Object(r.b)("p",null,"Checks that a field, identified via a ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/configuration/field_paths"}),"dot path"),", exists in an object."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.result = this.foo.exists("bar.baz")\n\n# In:  {"foo":{"bar":{"baz":"yep, I exist"}}}\n# Out: {"result":true}\n\n# In:  {"foo":{"bar":{}}}\n# Out: {"result":false}\n\n# In:  {"foo":{}}\n# Out: {"result":false}\n')),Object(r.b)("h3",{id:"from"},Object(r.b)("inlineCode",{parentName:"h3"},"from")),Object(r.b)("p",null,"Execute a query from the context of another message in the batch. This allows you to mutate events based on the contents of other messages."),Object(r.b)("p",null,"For example, the following map extracts the contents of the JSON field ",Object(r.b)("inlineCode",{parentName:"p"},"foo")," specifically from message index ",Object(r.b)("inlineCode",{parentName:"p"},"1")," of a batch, effectively overriding the field ",Object(r.b)("inlineCode",{parentName:"p"},"foo")," for all messages of a batch to that of message 1:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root = this\nroot.foo = json("foo").from(1)\n')),Object(r.b)("h3",{id:"from_all"},Object(r.b)("inlineCode",{parentName:"h3"},"from_all")),Object(r.b)("p",null,"Execute a query for all messages of the batch, and return an array of all results."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root = this\nroot.foo_summed = json("foo").from_all().sum()\n')),Object(r.b)("h3",{id:"or"},Object(r.b)("inlineCode",{parentName:"h3"},"or")),Object(r.b)("p",null,"If the result of the target query fails or resolves to ",Object(r.b)("inlineCode",{parentName:"p"},"null"),", returns the argument instead. This is an explicit method alternative to the coalesce pipe operator ",Object(r.b)("inlineCode",{parentName:"p"},"|"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),"root.doc.id = this.thing.id.or(uuid_v4())\n")),Object(r.b)("h2",{id:"string-manipulation"},"String Manipulation"),Object(r.b)("h3",{id:"contains"},Object(r.b)("inlineCode",{parentName:"h3"},"contains")),Object(r.b)("p",null,"Checks whether a string contains a substring and returns a boolean result."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.has_foo = this.thing.contains("foo")\n\n# In:  {"thing":"this foo that"}\n# Out: {"has_foo":true}\n\n# In:  {"thing":"this bar that"}\n# Out: {"has_foo":false}\n')),Object(r.b)("h3",{id:"length"},Object(r.b)("inlineCode",{parentName:"h3"},"length")),Object(r.b)("p",null,"Returns the length of a string."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.foo_len = this.foo.length()\n\n# In:  {"foo":"hello world"}\n# Out: {"foo_len":11}\n')),Object(r.b)("h3",{id:"slice"},Object(r.b)("inlineCode",{parentName:"h3"},"slice")),Object(r.b)("p",null,"Extract a slice from a string by specifying two indices, a low and high bound, which selects a half-open range that includes the first character, but excludes the last one. If the second index is omitted then it defaults to the length of the input sequence."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.beginning = this.value.slice(0, 2)\nroot.end = this.value.slice(4)\n\n# In:  {"value":"foo bar"}\n# Out: {"beginning":"fo","end":"bar"}\n')),Object(r.b)("p",null,"A negative low index can be used, indicating an offset from the end of the sequence. If the low index is greater than the length of the sequence then an empty result is returned."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.last_chunk = this.value.slice(-4)\nroot.the_rest = this.value.slice(0, -4)\n\n# In:  {"value":"foo bar"}\n# Out: {"last_chunk":" bar","the_rest":"foo"}\n')),Object(r.b)("h3",{id:"capitalize"},Object(r.b)("inlineCode",{parentName:"h3"},"capitalize")),Object(r.b)("p",null,"Takes a string value and returns a copy with all Unicode letters that begin words mapped to their Unicode title case."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.title = this.title.capitalize()\n\n# In:  {"title":"the foo bar"}\n# Out: {"title":"The Foo Bar"}\n')),Object(r.b)("h3",{id:"escape_html"},Object(r.b)("inlineCode",{parentName:"h3"},"escape_html")),Object(r.b)("p",null,"Escapes a string so that special characters like ",Object(r.b)("inlineCode",{parentName:"p"},"<")," to become ",Object(r.b)("inlineCode",{parentName:"p"},"&lt;"),". It escapes only five such characters: ",Object(r.b)("inlineCode",{parentName:"p"},"<"),", ",Object(r.b)("inlineCode",{parentName:"p"},">"),", ",Object(r.b)("inlineCode",{parentName:"p"},"&"),", ",Object(r.b)("inlineCode",{parentName:"p"},"'")," and ",Object(r.b)("inlineCode",{parentName:"p"},'"')," so that it can be safely placed within an HTML entity."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.escaped = this.value.escape_html()\n\n# In:  {"value":"foo & bar"}\n# Out: {"escaped":"foo &amp; bar"}\n')),Object(r.b)("h3",{id:"unescape_html"},Object(r.b)("inlineCode",{parentName:"h3"},"unescape_html")),Object(r.b)("p",null,"Unescapes a string so that entities like ",Object(r.b)("inlineCode",{parentName:"p"},"&lt;")," become ",Object(r.b)("inlineCode",{parentName:"p"},"<"),". It unescapes a larger range of entities than ",Object(r.b)("inlineCode",{parentName:"p"},"escape_html")," escapes. For example, ",Object(r.b)("inlineCode",{parentName:"p"},"&aacute;")," unescapes to ",Object(r.b)("inlineCode",{parentName:"p"},"\xe1"),", as does ",Object(r.b)("inlineCode",{parentName:"p"},"&#225;")," and ",Object(r.b)("inlineCode",{parentName:"p"},"&xE1;"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.unescaped = this.value.unescape_html()\n\n# In:  {"value":"foo &amp; bar"}\n# Out: {"unescaped":"foo & bar"}\n')),Object(r.b)("h3",{id:"escape_url_query"},Object(r.b)("inlineCode",{parentName:"h3"},"escape_url_query")),Object(r.b)("p",null,"Escapes a string so that it can be safely placed within a URL query."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.escaped = this.value.escape_url_query()\n\n# In:  {"value":"foo & bar"}\n# Out: {"escaped":"foo+%26+bar"}\n')),Object(r.b)("h3",{id:"unescape_url_query"},Object(r.b)("inlineCode",{parentName:"h3"},"unescape_url_query")),Object(r.b)("p",null,"Expands escape sequences from a URL query string."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.unescaped = this.value.unescape_url_query()\n\n# In:  {"value":"foo+%26+bar"}\n# Out: {"unescaped":"foo & bar"}\n')),Object(r.b)("h3",{id:"filepath_join"},Object(r.b)("inlineCode",{parentName:"h3"},"filepath_join")),Object(r.b)("p",null,"Joins an array of path elements into a single file path. The separator depends on the operating system of the machine."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.path = this.path_elements.filepath_join()\n\n# In:  {"path_elements":["/foo/","bar.txt"]}\n# Out: {"path":"/foo/bar.txt"}\n')),Object(r.b)("h3",{id:"filepath_split"},Object(r.b)("inlineCode",{parentName:"h3"},"filepath_split")),Object(r.b)("p",null,"Splits a file path immediately following the final Separator, separating it into a directory and file name component returned as a two element array of strings. If there is no Separator in the path, the first element will be empty and the second will contain the path. The separator depends on the operating system of the machine."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.path_sep = this.path.filepath_split()\n\n# In:  {"path":"/foo/bar.txt"}\n# Out: {"path_sep":["/foo/","bar.txt"]}\n\n# In:  {"path":"baz.txt"}\n# Out: {"path_sep":["","baz.txt"]}\n')),Object(r.b)("h3",{id:"format"},Object(r.b)("inlineCode",{parentName:"h3"},"format")),Object(r.b)("p",null,"Use a value string as a format specifier in order to produce a new string, using any number of provided arguments."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.foo = "%s(%v): %v".format(this.name, this.age, this.fingers)\n\n# In:  {"name":"lance","age":37,"fingers":13}\n# Out: {"foo":"lance(37): 13"}\n')),Object(r.b)("h3",{id:"has_prefix"},Object(r.b)("inlineCode",{parentName:"h3"},"has_prefix")),Object(r.b)("p",null,"Checks whether a string has a prefix argument and returns a bool."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.t1 = this.v1.has_prefix("foo")\nroot.t2 = this.v2.has_prefix("foo")\n\n# In:  {"v1":"foobar","v2":"barfoo"}\n# Out: {"t1":true,"t2":false}\n')),Object(r.b)("h3",{id:"has_suffix"},Object(r.b)("inlineCode",{parentName:"h3"},"has_suffix")),Object(r.b)("p",null,"Checks whether a string has a suffix argument and returns a bool."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.t1 = this.v1.has_suffix("foo")\nroot.t2 = this.v2.has_suffix("foo")\n\n# In:  {"v1":"foobar","v2":"barfoo"}\n# Out: {"t1":false,"t2":true}\n')),Object(r.b)("h3",{id:"uppercase"},Object(r.b)("inlineCode",{parentName:"h3"},"uppercase")),Object(r.b)("p",null,"Convert a string value into uppercase."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.foo = this.foo.uppercase()\n\n# In:  {"foo":"hello world"}\n# Out: {"foo":"HELLO WORLD"}\n')),Object(r.b)("h3",{id:"lowercase"},Object(r.b)("inlineCode",{parentName:"h3"},"lowercase")),Object(r.b)("p",null,"Convert a string value into lowercase."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.foo = this.foo.lowercase()\n\n# In:  {"foo":"HELLO WORLD"}\n# Out: {"foo":"hello world"}\n')),Object(r.b)("h3",{id:"quote"},Object(r.b)("inlineCode",{parentName:"h3"},"quote")),Object(r.b)("p",null,"Quotes a target string using escape sequences (",Object(r.b)("inlineCode",{parentName:"p"},"\t"),", ",Object(r.b)("inlineCode",{parentName:"p"}),", ",Object(r.b)("inlineCode",{parentName:"p"},"\ufffd"),", ",Object(r.b)("inlineCode",{parentName:"p"},"\u0100"),") for control characters and non-printable characters."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.quoted = this.thing.quote()\n\n# In:  {"thing":"foo\\nbar"}\n# Out: {"quoted":"\\"foo\\\\nbar\\""}\n')),Object(r.b)("h3",{id:"unquote"},Object(r.b)("inlineCode",{parentName:"h3"},"unquote")),Object(r.b)("p",null,"Unquotes a target string, expanding any escape sequences (",Object(r.b)("inlineCode",{parentName:"p"},"\t"),", ",Object(r.b)("inlineCode",{parentName:"p"}),", ",Object(r.b)("inlineCode",{parentName:"p"},"\ufffd"),", ",Object(r.b)("inlineCode",{parentName:"p"},"\u0100"),") for control characters and non-printable characters."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.unquoted = this.thing.unquote()\n\n# In:  {"thing":"\\"foo\\\\nbar\\""}\n# Out: {"unquoted":"foo\\nbar"}\n')),Object(r.b)("h3",{id:"replace"},Object(r.b)("inlineCode",{parentName:"h3"},"replace")),Object(r.b)("p",null,"Replaces all occurrences of the first argument in a target string with the second argument."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.new_value = this.value.replace("foo","dog")\n\n# In:  {"value":"The foo ate my homework"}\n# Out: {"new_value":"The dog ate my homework"}\n')),Object(r.b)("h3",{id:"replace_many"},Object(r.b)("inlineCode",{parentName:"h3"},"replace_many")),Object(r.b)("p",null,"For each pair of strings in an argument array, replaces all occurrences of the first item of the pair with the second. This is a more compact way of chaining a series of ",Object(r.b)("inlineCode",{parentName:"p"},"replace")," methods."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.new_value = this.value.replace_many([\n  "<b>", "&lt;b&gt;",\n  "</b>", "&lt;/b&gt;",\n  "<i>", "&lt;i&gt;",\n  "</i>", "&lt;/i&gt;",\n])\n\n# In:  {"value":"<i>Hello</i> <b>World</b>"}\n# Out: {"new_value":"&lt;i&gt;Hello&lt;/i&gt; &lt;b&gt;World&lt;/b&gt;"}\n')),Object(r.b)("h3",{id:"split"},Object(r.b)("inlineCode",{parentName:"h3"},"split")),Object(r.b)("p",null,"Split a string value into an array of strings by splitting it on a string separator."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.new_value = this.value.split(",")\n\n# In:  {"value":"foo,bar,baz"}\n# Out: {"new_value":["foo","bar","baz"]}\n')),Object(r.b)("h3",{id:"strip_html"},Object(r.b)("inlineCode",{parentName:"h3"},"strip_html")),Object(r.b)("p",null,"Attempts to remove all HTML tags from a target string."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.stripped = this.value.strip_html()\n\n# In:  {"value":"<p>the plain <strong>old text</strong></p>"}\n# Out: {"stripped":"the plain old text"}\n')),Object(r.b)("p",null,"It's also possible to provide an explicit list of element types to preserve in the output."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.stripped = this.value.strip_html(["article"])\n\n# In:  {"value":"<article><p>the plain <strong>old text</strong></p></article>"}\n# Out: {"stripped":"<article>the plain old text</article>"}\n')),Object(r.b)("h3",{id:"trim"},Object(r.b)("inlineCode",{parentName:"h3"},"trim")),Object(r.b)("p",null,"Remove all leading and trailing characters from a string that are contained within an argument cutset. If no arguments are provided then whitespace is removed."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.title = this.title.trim("!?")\nroot.description = this.description.trim()\n\n# In:  {"description":"  something happened and its amazing! ","title":"!!!watch out!?"}\n# Out: {"description":"something happened and its amazing!","title":"watch out"}\n')),Object(r.b)("h2",{id:"number-manipulation"},"Number Manipulation"),Object(r.b)("h3",{id:"abs"},Object(r.b)("inlineCode",{parentName:"h3"},"abs")),Object(r.b)("p",null,"Returns the absolute value of a number."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.new_value = this.value.abs()\n\n# In:  {"value":5.3}\n# Out: {"new_value":5.3}\n\n# In:  {"value":-5.9}\n# Out: {"new_value":5.9}\n')),Object(r.b)("h3",{id:"ceil"},Object(r.b)("inlineCode",{parentName:"h3"},"ceil")),Object(r.b)("p",null,"Returns the least integer value greater than or equal to a number."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.new_value = this.value.ceil()\n\n# In:  {"value":5.3}\n# Out: {"new_value":6}\n\n# In:  {"value":-5.9}\n# Out: {"new_value":-5}\n')),Object(r.b)("h3",{id:"floor"},Object(r.b)("inlineCode",{parentName:"h3"},"floor")),Object(r.b)("p",null,"Returns the greatest integer value less than or equal to the target number."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.new_value = this.value.floor()\n\n# In:  {"value":5.7}\n# Out: {"new_value":5}\n')),Object(r.b)("h3",{id:"log"},Object(r.b)("inlineCode",{parentName:"h3"},"log")),Object(r.b)("p",null,"Returns the natural logarithm of a number."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.new_value = this.value.log().round()\n\n# In:  {"value":1}\n# Out: {"new_value":0}\n\n# In:  {"value":2.7183}\n# Out: {"new_value":1}\n')),Object(r.b)("h3",{id:"log10"},Object(r.b)("inlineCode",{parentName:"h3"},"log10")),Object(r.b)("p",null,"Returns the decimal logarithm of a number."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.new_value = this.value.log10()\n\n# In:  {"value":100}\n# Out: {"new_value":2}\n\n# In:  {"value":1000}\n# Out: {"new_value":3}\n')),Object(r.b)("h3",{id:"max"},Object(r.b)("inlineCode",{parentName:"h3"},"max")),Object(r.b)("p",null,"Returns the largest numerical value found within an array. All values must be numerical and the array must not be empty, otherwise an error is returned."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.biggest = this.values.max()\n\n# In:  {"values":[0,3,2.5,7,5]}\n# Out: {"biggest":7}\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.new_value = [0,this.value].max()\n\n# In:  {"value":-1}\n# Out: {"new_value":0}\n\n# In:  {"value":7}\n# Out: {"new_value":7}\n')),Object(r.b)("h3",{id:"min"},Object(r.b)("inlineCode",{parentName:"h3"},"min")),Object(r.b)("p",null,"Returns the smallest numerical value found within an array. All values must be numerical and the array must not be empty, otherwise an error is returned."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.smallest = this.values.min()\n\n# In:  {"values":[0,3,-2.5,7,5]}\n# Out: {"smallest":-2.5}\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.new_value = [10,this.value].min()\n\n# In:  {"value":2}\n# Out: {"new_value":2}\n\n# In:  {"value":23}\n# Out: {"new_value":10}\n')),Object(r.b)("h3",{id:"round"},Object(r.b)("inlineCode",{parentName:"h3"},"round")),Object(r.b)("p",null,"Rounds numbers to the nearest integer, rounding half away from zero."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.new_value = this.value.round()\n\n# In:  {"value":5.3}\n# Out: {"new_value":5}\n\n# In:  {"value":5.9}\n# Out: {"new_value":6}\n')),Object(r.b)("h2",{id:"regular-expressions"},"Regular Expressions"),Object(r.b)("h3",{id:"re_find_all"},Object(r.b)("inlineCode",{parentName:"h3"},"re_find_all")),Object(r.b)("p",null,"Returns an array containing all successive matches of a regular expression in a string."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.matches = this.value.re_find_all("a.")\n\n# In:  {"value":"paranormal"}\n# Out: {"matches":["ar","an","al"]}\n')),Object(r.b)("h3",{id:"re_find_all_submatch"},Object(r.b)("inlineCode",{parentName:"h3"},"re_find_all_submatch")),Object(r.b)("p",null,"Returns an array of arrays containing all successive matches of the regular expression in a string and the matches, if any, of its subexpressions."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.matches = this.value.re_find_all_submatch("a(x*)b")\n\n# In:  {"value":"-axxb-ab-"}\n# Out: {"matches":[["axxb","xx"],["ab",""]]}\n')),Object(r.b)("h3",{id:"re_find_object"},Object(r.b)("inlineCode",{parentName:"h3"},"re_find_object")),Object(r.b)("p",null,"Returns an object containing the first match of the regular expression and the matches of its subexpressions. The key of each match value is the name of the group when specified, otherwise it is the index of the matching group, starting with the expression as a whole at 0."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.matches = this.value.re_find_object("a(?P<foo>x*)b")\n\n# In:  {"value":"-axxb-ab-"}\n# Out: {"matches":{"0":"axxb","foo":"xx"}}\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.matches = this.value.re_find_object("(?P<key>\\\\w+):\\\\s+(?P<value>\\\\w+)")\n\n# In:  {"value":"option1: value1"}\n# Out: {"matches":{"0":"option1: value1","key":"option1","value":"value1"}}\n')),Object(r.b)("h3",{id:"re_find_all_object"},Object(r.b)("inlineCode",{parentName:"h3"},"re_find_all_object")),Object(r.b)("p",null,"Returns an array of objects containing all matches of the regular expression and the matches of its subexpressions. The key of each match value is the name of the group when specified, otherwise it is the index of the matching group, starting with the expression as a whole at 0."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.matches = this.value.re_find_all_object("a(?P<foo>x*)b")\n\n# In:  {"value":"-axxb-ab-"}\n# Out: {"matches":[{"0":"axxb","foo":"xx"},{"0":"ab","foo":""}]}\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.matches = this.value.re_find_all_object("(?m)(?P<key>\\\\w+):\\\\s+(?P<value>\\\\w+)$")\n\n# In:  {"value":"option1: value1\\noption2: value2\\noption3: value3"}\n# Out: {"matches":[{"0":"option1: value1","key":"option1","value":"value1"},{"0":"option2: value2","key":"option2","value":"value2"},{"0":"option3: value3","key":"option3","value":"value3"}]}\n')),Object(r.b)("h3",{id:"re_match"},Object(r.b)("inlineCode",{parentName:"h3"},"re_match")),Object(r.b)("p",null,"Checks whether a regular expression matches against any part of a string and returns a boolean."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.matches = this.value.re_match("[0-9]")\n\n# In:  {"value":"there are 10 puppies"}\n# Out: {"matches":true}\n\n# In:  {"value":"there are ten puppies"}\n# Out: {"matches":false}\n')),Object(r.b)("h3",{id:"re_replace"},Object(r.b)("inlineCode",{parentName:"h3"},"re_replace")),Object(r.b)("p",null,"Replaces all occurrences of the argument regular expression in a string with a value. Inside the value $ signs are interpreted as submatch expansions, e.g. ",Object(r.b)("inlineCode",{parentName:"p"},"$1")," represents the text of the first submatch."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.new_value = this.value.re_replace("ADD ([0-9]+)","+($1)")\n\n# In:  {"value":"foo ADD 70"}\n# Out: {"new_value":"foo +(70)"}\n')),Object(r.b)("h2",{id:"timestamp-manipulation"},"Timestamp Manipulation"),Object(r.b)("h3",{id:"parse_timestamp_unix"},Object(r.b)("inlineCode",{parentName:"h3"},"parse_timestamp_unix")),Object(r.b)("p",null,"Attempts to parse a string as a timestamp, following ISO 8601 format by default, and returns the unix epoch."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.doc.timestamp = this.doc.timestamp.parse_timestamp_unix()\n\n# In:  {"doc":{"timestamp":"2020-08-14T11:45:26.371Z"}}\n# Out: {"doc":{"timestamp":1597405526}}\n')),Object(r.b)("p",null,"An optional string argument can be used in order to specify the expected format of the timestamp. The format is defined by showing how the reference time, defined to be Mon Jan 2 15:04:05 -0700 MST 2006, would be displayed if it were the value."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.doc.timestamp = this.doc.timestamp.parse_timestamp_unix("2006-Jan-02")\n\n# In:  {"doc":{"timestamp":"2020-Aug-14"}}\n# Out: {"doc":{"timestamp":1597363200}}\n')),Object(r.b)("h3",{id:"parse_timestamp"},Object(r.b)("inlineCode",{parentName:"h3"},"parse_timestamp")),Object(r.b)("p",null,"BETA: This method is mostly stable but breaking changes could still be made outside of major version releases if a fundamental problem with it is found."),Object(r.b)("p",null,"Attempts to parse a string as a timestamp following a specified format and outputs a string following ISO 8601, which can then be fed into ",Object(r.b)("inlineCode",{parentName:"p"},"format_timestamp"),". The input format is defined by showing how the reference time, defined to be Mon Jan 2 15:04:05 -0700 MST 2006, would be displayed if it were the value."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.doc.timestamp = this.doc.timestamp.parse_timestamp("2006-Jan-02")\n\n# In:  {"doc":{"timestamp":"2020-Aug-14"}}\n# Out: {"doc":{"timestamp":"2020-08-14T00:00:00Z"}}\n')),Object(r.b)("h3",{id:"format_timestamp"},Object(r.b)("inlineCode",{parentName:"h3"},"format_timestamp")),Object(r.b)("p",null,"BETA: This method is mostly stable but breaking changes could still be made outside of major version releases if a fundamental problem with it is found."),Object(r.b)("p",null,"Attempts to format a timestamp value as a string according to a specified format, or ISO 8601 by default. Timestamp values can either be a numerical unix time in seconds (with up to nanosecond precision via decimals), or a string in ISO 8601 format."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),"root.something_at = (this.created_at + 300).format_timestamp()\n")),Object(r.b)("p",null,"An optional string argument can be used in order to specify the output format of the timestamp. The format is defined by showing how the reference time, defined to be Mon Jan 2 15:04:05 -0700 MST 2006, would be displayed if it were the value."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.something_at = (this.created_at + 300).format_timestamp("2006-Jan-02 15:04:05")\n')),Object(r.b)("p",null,"A second optional string argument can also be used in order to specify a timezone, otherwise the timezone of the input string is used, or in the case of unix timestamps the local timezone is used."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.something_at = this.created_at.format_timestamp("2006-Jan-02 15:04:05", "UTC")\n\n# In:  {"created_at":1597405526}\n# Out: {"something_at":"2020-Aug-14 11:45:26"}\n\n# In:  {"created_at":"2020-08-14T11:50:26.371Z"}\n# Out: {"something_at":"2020-Aug-14 11:50:26"}\n')),Object(r.b)("p",null,"And ",Object(r.b)("inlineCode",{parentName:"p"},"format_timestamp")," supports up to nanosecond precision with floating point timestamp values."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.something_at = this.created_at.format_timestamp("2006-Jan-02 15:04:05.999999", "UTC")\n\n# In:  {"created_at":1597405526.123456}\n# Out: {"something_at":"2020-Aug-14 11:45:26.123456"}\n\n# In:  {"created_at":"2020-08-14T11:50:26.371Z"}\n# Out: {"something_at":"2020-Aug-14 11:50:26.371"}\n')),Object(r.b)("h2",{id:"type-coercion"},"Type Coercion"),Object(r.b)("h3",{id:"not_null"},Object(r.b)("inlineCode",{parentName:"h3"},"not_null")),Object(r.b)("p",null,"Ensures that the given value is not ",Object(r.b)("inlineCode",{parentName:"p"},"null"),", and if so returns it, otherwise an error is returned."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.a = this.a.not_null()\n\n# In:  {"a":"foobar","b":"barbaz"}\n# Out: {"a":"foobar"}\n\n# In:  {"b":"barbaz"}\n# Out: Error("failed to execute mapping query at line 1: value is null")\n')),Object(r.b)("h3",{id:"bytes"},Object(r.b)("inlineCode",{parentName:"h3"},"bytes")),Object(r.b)("p",null,"Marshal a value into a byte array. If the value is already a byte array it is unchanged."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.first_byte = this.name.bytes().index(0)\n\n# In:  {"name":"foobar bazson"}\n# Out: {"first_byte":102}\n')),Object(r.b)("h3",{id:"string"},Object(r.b)("inlineCode",{parentName:"h3"},"string")),Object(r.b)("p",null,"Marshal a value into a string. If the value is already a string it is unchanged."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.nested_json = this.string()\n\n# In:  {"foo":"bar"}\n# Out: {"nested_json":"{\\"foo\\":\\"bar\\"}"}\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.id = this.id.string()\n\n# In:  {"id":228930314431312345}\n# Out: {"id":"228930314431312345"}\n')),Object(r.b)("h3",{id:"bool"},Object(r.b)("inlineCode",{parentName:"h3"},"bool")),Object(r.b)("p",null,"Attempt to parse a value into a boolean. An optional argument can be provided, in which case if the value cannot be parsed the argument will be returned instead. If the value is a number then any non-zero value will resolve to ",Object(r.b)("inlineCode",{parentName:"p"},"true"),", if the value is a string then any of the following values are considered valid: ",Object(r.b)("inlineCode",{parentName:"p"},"1, t, T, TRUE, true, True, 0, f, F, FALSE"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),"root.foo = this.thing.bool()\nroot.bar = this.thing.bool(true)\n")),Object(r.b)("h3",{id:"not_empty"},Object(r.b)("inlineCode",{parentName:"h3"},"not_empty")),Object(r.b)("p",null,"Ensures that the given string, array or object value is not empty, and if so returns it, otherwise an error is returned."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.a = this.a.not_empty()\n\n# In:  {"a":"foo"}\n# Out: {"a":"foo"}\n\n# In:  {"a":""}\n# Out: Error("failed to execute mapping query at line 1: string value is empty")\n\n# In:  {"a":["foo","bar"]}\n# Out: {"a":["foo","bar"]}\n\n# In:  {"a":[]}\n# Out: Error("failed to execute mapping query at line 1: array value is empty")\n\n# In:  {"a":{"b":"foo","c":"bar"}}\n# Out: {"a":{"b":"foo","c":"bar"}}\n\n# In:  {"a":{}}\n# Out: Error("failed to execute mapping query at line 1: object value is empty")\n')),Object(r.b)("h3",{id:"number"},Object(r.b)("inlineCode",{parentName:"h3"},"number")),Object(r.b)("p",null,"Attempt to parse a value into a number. An optional argument can be provided, in which case if the value cannot be parsed into a number the argument will be returned instead."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),"root.foo = this.thing.number() + 10\nroot.bar = this.thing.number(5) * 10\n")),Object(r.b)("h3",{id:"type"},Object(r.b)("inlineCode",{parentName:"h3"},"type")),Object(r.b)("p",null,"Returns the type of a value as a string, providing one of the following values: ",Object(r.b)("inlineCode",{parentName:"p"},"string"),", ",Object(r.b)("inlineCode",{parentName:"p"},"bytes"),", ",Object(r.b)("inlineCode",{parentName:"p"},"number"),", ",Object(r.b)("inlineCode",{parentName:"p"},"bool"),", ",Object(r.b)("inlineCode",{parentName:"p"},"array"),", ",Object(r.b)("inlineCode",{parentName:"p"},"object")," or ",Object(r.b)("inlineCode",{parentName:"p"},"null"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.bar_type = this.bar.type()\nroot.foo_type = this.foo.type()\n\n# In:  {"bar":10,"foo":"is a string"}\n# Out: {"bar_type":"number","foo_type":"string"}\n')),Object(r.b)("h2",{id:"object--array-manipulation"},"Object & Array Manipulation"),Object(r.b)("h3",{id:"collapse"},Object(r.b)("inlineCode",{parentName:"h3"},"collapse")),Object(r.b)("p",null,"Collapse an array or object into an object of key/value pairs for each field, where the key is the full path of the structured field in dot path notation. Empty arrays an objects are ignored by default."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.result = this.collapse()\n\n# In:  {"foo":[{"bar":"1"},{"bar":{}},{"bar":"2"},{"bar":[]}]}\n# Out: {"result":{"foo.0.bar":"1","foo.2.bar":"2"}}\n')),Object(r.b)("p",null,"An optional boolean parameter can be set to true in order to include empty objects and arrays."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.result = this.collapse(true)\n\n# In:  {"foo":[{"bar":"1"},{"bar":{}},{"bar":"2"},{"bar":[]}]}\n# Out: {"result":{"foo.0.bar":"1","foo.1.bar":{},"foo.2.bar":"2","foo.3.bar":[]}}\n')),Object(r.b)("h3",{id:"get"},Object(r.b)("inlineCode",{parentName:"h3"},"get")),Object(r.b)("p",null,"Extract a field value, identified via a ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/configuration/field_paths"}),"dot path"),", from an object."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.result = this.foo.get(this.target)\n\n# In:  {"foo":{"bar":"from bar","baz":"from baz"},"target":"bar"}\n# Out: {"result":"from bar"}\n\n# In:  {"foo":{"bar":"from bar","baz":"from baz"},"target":"baz"}\n# Out: {"result":"from baz"}\n')),Object(r.b)("h3",{id:"json_schema"},Object(r.b)("inlineCode",{parentName:"h3"},"json_schema")),Object(r.b)("p",null,"BETA: This method is mostly stable but breaking changes could still be made outside of major version releases if a fundamental problem with it is found."),Object(r.b)("p",null,"Checks a ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://json-schema.org/"}),"JSON schema")," against a value and returns the value if it matches or throws and error if it does not."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root = this.json_schema("""{\n  "type":"object",\n  "properties":{\n    "foo":{\n      "type":"string"\n    }\n  }\n}""")\n\n# In:  {"foo":"bar"}\n# Out: {"foo":"bar"}\n\n# In:  {"foo":5}\n# Out: Error("failed to execute mapping query at line 1: foo invalid type. expected: string, given: integer")\n')),Object(r.b)("p",null,"In order to load a schema from a file use the ",Object(r.b)("inlineCode",{parentName:"p"},"file")," function."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root = this.json_schema(file(var("BENTHOS_TEST_BLOBLANG_SCHEMA_FILE")))\n')),Object(r.b)("h3",{id:"all"},Object(r.b)("inlineCode",{parentName:"h3"},"all")),Object(r.b)("p",null,"Checks each element of an array against a query and returns true if all elements passed. An error occurs if the target is not an array, or if any element results in the provided query returning a non-boolean result. Returns false if the target array is empty."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.all_over_21 = this.patrons.all(this.age >= 21)\n\n# In:  {"patrons":[{"id":"1","age":18},{"id":"2","age":23}]}\n# Out: {"all_over_21":false}\n\n# In:  {"patrons":[{"id":"1","age":45},{"id":"2","age":23}]}\n# Out: {"all_over_21":true}\n')),Object(r.b)("h3",{id:"any"},Object(r.b)("inlineCode",{parentName:"h3"},"any")),Object(r.b)("p",null,"Checks the elements of an array against a query and returns true if any element passes. An error occurs if the target is not an array, or if an element results in the provided query returning a non-boolean result. Returns false if the target array is empty."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.any_over_21 = this.patrons.any(this.age >= 21)\n\n# In:  {"patrons":[{"id":"1","age":18},{"id":"2","age":23}]}\n# Out: {"any_over_21":true}\n\n# In:  {"patrons":[{"id":"1","age":10},{"id":"2","age":12}]}\n# Out: {"any_over_21":false}\n')),Object(r.b)("h3",{id:"append"},Object(r.b)("inlineCode",{parentName:"h3"},"append")),Object(r.b)("p",null,"Returns an array with new elements appended to the end."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.foo = this.foo.append("and", "this")\n\n# In:  {"foo":["bar","baz"]}\n# Out: {"foo":["bar","baz","and","this"]}\n')),Object(r.b)("h3",{id:"contains-1"},Object(r.b)("inlineCode",{parentName:"h3"},"contains")),Object(r.b)("p",null,"Checks whether an array contains an element matching the argument, or an object contains a value matching the argument, and returns a boolean result."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.has_foo = this.thing.contains("foo")\n\n# In:  {"thing":["this","foo","that"]}\n# Out: {"has_foo":true}\n\n# In:  {"thing":["this","bar","that"]}\n# Out: {"has_foo":false}\n')),Object(r.b)("h3",{id:"enumerated"},Object(r.b)("inlineCode",{parentName:"h3"},"enumerated")),Object(r.b)("p",null,"Converts an array into a new array of objects, where each object has a field index containing the ",Object(r.b)("inlineCode",{parentName:"p"},"index")," of the element and a field ",Object(r.b)("inlineCode",{parentName:"p"},"value")," containing the original value of the element."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.foo = this.foo.enumerated()\n\n# In:  {"foo":["bar","baz"]}\n# Out: {"foo":[{"index":0,"value":"bar"},{"index":1,"value":"baz"}]}\n')),Object(r.b)("h3",{id:"explode"},Object(r.b)("inlineCode",{parentName:"h3"},"explode")),Object(r.b)("p",null,"Explodes an array or object at a ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/configuration/field_paths"}),"field path"),"."),Object(r.b)("h4",{id:"on-arrays"},"On arrays"),Object(r.b)("p",null,"Exploding arrays results in an array containing elements matching the original document, where the target field of each element is an element of the exploded array:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root = this.explode("value")\n\n# In:  {"id":1,"value":["foo","bar","baz"]}\n# Out: [{"id":1,"value":"foo"},{"id":1,"value":"bar"},{"id":1,"value":"baz"}]\n')),Object(r.b)("h4",{id:"on-objects"},"On objects"),Object(r.b)("p",null,"Exploding objects results in an object where the keys match the target object, and the values match the original document but with the target field replaced by the exploded value:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root = this.explode("value")\n\n# In:  {"id":1,"value":{"foo":2,"bar":[3,4],"baz":{"bev":5}}}\n# Out: {"bar":{"id":1,"value":[3,4]},"baz":{"id":1,"value":{"bev":5}},"foo":{"id":1,"value":2}}\n')),Object(r.b)("h3",{id:"filter"},Object(r.b)("inlineCode",{parentName:"h3"},"filter")),Object(r.b)("p",null,"Executes a mapping query argument for each element of an array or key/value pair of an object. If the query returns ",Object(r.b)("inlineCode",{parentName:"p"},"false")," the item is removed from the resulting array or object. The item will also be removed if the query returns any non-boolean value."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.new_nums = this.nums.filter(this > 10)\n\n# In:  {"nums":[3,11,4,17]}\n# Out: {"new_nums":[11,17]}\n')),Object(r.b)("h4",{id:"on-objects-1"},"On objects"),Object(r.b)("p",null,"When filtering objects the mapping query argument is provided a context with a field ",Object(r.b)("inlineCode",{parentName:"p"},"key")," containing the value key, and a field ",Object(r.b)("inlineCode",{parentName:"p"},"value")," containing the value."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.new_dict = this.dict.filter(this.value.contains("foo"))\n\n# In:  {"dict":{"first":"hello foo","second":"world","third":"this foo is great"}}\n# Out: {"new_dict":{"first":"hello foo","third":"this foo is great"}}\n')),Object(r.b)("h3",{id:"flatten"},Object(r.b)("inlineCode",{parentName:"h3"},"flatten")),Object(r.b)("p",null,"Iterates an array and any element that is itself an array is removed and has its elements inserted directly in the resulting array."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.result = this.flatten()\n\n# In:  ["foo",["bar","baz"],"buz"]\n# Out: {"result":["foo","bar","baz","buz"]}\n')),Object(r.b)("h3",{id:"fold"},Object(r.b)("inlineCode",{parentName:"h3"},"fold")),Object(r.b)("p",null,"Takes two arguments: an initial value, and a mapping query. For each element of an array the mapping context is an object with two fields ",Object(r.b)("inlineCode",{parentName:"p"},"tally")," and ",Object(r.b)("inlineCode",{parentName:"p"},"value"),", where ",Object(r.b)("inlineCode",{parentName:"p"},"tally")," contains the current accumulated value and ",Object(r.b)("inlineCode",{parentName:"p"},"value")," is the value of the current element. The mapping must return the result of adding the value to the tally."),Object(r.b)("p",null,"The first argument is the value that ",Object(r.b)("inlineCode",{parentName:"p"},"tally")," will have on the first call."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.sum = this.foo.fold(0, this.tally + this.value)\n\n# In:  {"foo":[3,8,11]}\n# Out: {"sum":22}\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.result = this.foo.fold("", "%v%v".format(this.tally, this.value))\n\n# In:  {"foo":["hello ", "world"]}\n# Out: {"result":"hello world"}\n')),Object(r.b)("h3",{id:"index"},Object(r.b)("inlineCode",{parentName:"h3"},"index")),Object(r.b)("p",null,"Extract an element from an array by an index. The index can be negative, and if so the element will be selected from the end counting backwards starting from -1. E.g. an index of -1 returns the last element, an index of -2 returns the element before the last, and so on."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.last_name = this.names.index(-1)\n\n# In:  {"names":["rachel","stevens"]}\n# Out: {"last_name":"stevens"}\n')),Object(r.b)("p",null,"It is also possible to use this method on byte arrays, in which case the selected element will be returned as an integer."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.last_byte = this.name.bytes().index(-1)\n\n# In:  {"name":"foobar bazson"}\n# Out: {"last_byte":110}\n')),Object(r.b)("h3",{id:"keys"},Object(r.b)("inlineCode",{parentName:"h3"},"keys")),Object(r.b)("p",null,"Returns the keys of an object as an array. The order of the resulting array will be random."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.foo_keys = this.foo.keys()\n\n# In:  {"foo":{"bar":1,"baz":2}}\n# Out: {"foo_keys":["bar","baz"]}\n')),Object(r.b)("h3",{id:"length-1"},Object(r.b)("inlineCode",{parentName:"h3"},"length")),Object(r.b)("p",null,"Returns the length of an array or object (number of keys)."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.foo_len = this.foo.length()\n\n# In:  {"foo":["first","second"]}\n# Out: {"foo_len":2}\n\n# In:  {"foo":{"first":"bar","second":"baz"}}\n# Out: {"foo_len":2}\n')),Object(r.b)("h3",{id:"map_each"},Object(r.b)("inlineCode",{parentName:"h3"},"map_each")),Object(r.b)("p",null,"Returns the length of an array or object (number of keys)."),Object(r.b)("h4",{id:"on-arrays-1"},"On arrays"),Object(r.b)("p",null,"Apply a mapping to each element of an array and replace the element with the result. Within the argument mapping the context is the value of the element being mapped."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.new_nums = this.nums.map_each(\n  match this {\n    this < 10 => deleted()\n    _ => this - 10\n  }\n)\n\n# In:  {"nums":[3,11,4,17]}\n# Out: {"new_nums":[1,7]}\n')),Object(r.b)("h4",{id:"on-objects-2"},"On objects"),Object(r.b)("p",null,"Apply a mapping to each value of an object and replace the value with the result. Within the argument mapping the context is an object with a field ",Object(r.b)("inlineCode",{parentName:"p"},"key")," containing the value key, and a field ",Object(r.b)("inlineCode",{parentName:"p"},"value"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.new_dict = this.dict.map_each(this.value.uppercase())\n\n# In:  {"dict":{"foo":"hello","bar":"world"}}\n# Out: {"new_dict":{"bar":"WORLD","foo":"HELLO"}}\n')),Object(r.b)("h3",{id:"merge"},Object(r.b)("inlineCode",{parentName:"h3"},"merge")),Object(r.b)("p",null,"Merge a source object into an existing destination object. When a collision is found within the merged structures (both a source and destination object contain the same non-object keys) the result will be an array containing both values, where values that are already arrays will be expanded into the resulting array."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root = this.foo.merge(this.bar)\n\n# In:  {"foo":{"first_name":"fooer","likes":"bars"},"bar":{"second_name":"barer","likes":"foos"}}\n# Out: {"first_name":"fooer","likes":["bars","foos"],"second_name":"barer"}\n')),Object(r.b)("h3",{id:"sort"},Object(r.b)("inlineCode",{parentName:"h3"},"sort")),Object(r.b)("p",null,"Attempts to sort the values of an array in increasing order. The type of all values must match in order for the ordering to be accurate. Supports string and number values."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.sorted = this.foo.sort()\n\n# In:  {"foo":["bbb","ccc","aaa"]}\n# Out: {"sorted":["aaa","bbb","ccc"]}\n')),Object(r.b)("p",null,"It's also possible to specify a mapping argument, which is provided an object context with fields ",Object(r.b)("inlineCode",{parentName:"p"},"left")," and ",Object(r.b)("inlineCode",{parentName:"p"},"right"),", the mapping must return a boolean indicating whether the ",Object(r.b)("inlineCode",{parentName:"p"},"left")," value is less than ",Object(r.b)("inlineCode",{parentName:"p"},"right"),". This allows you to sort arrays containing non-string or non-number values."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.sorted = this.foo.sort(this.left.v < this.right.v)\n\n# In:  {"foo":[{"id":"foo","v":"bbb"},{"id":"bar","v":"ccc"},{"id":"baz","v":"aaa"}]}\n# Out: {"sorted":[{"id":"baz","v":"aaa"},{"id":"foo","v":"bbb"},{"id":"bar","v":"ccc"}]}\n')),Object(r.b)("h3",{id:"slice-1"},Object(r.b)("inlineCode",{parentName:"h3"},"slice")),Object(r.b)("p",null,"Extract a slice from an array by specifying two indices, a low and high bound, which selects a half-open range that includes the first element, but excludes the last one. If the second index is omitted then it defaults to the length of the input sequence."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.beginning = this.value.slice(0, 2)\nroot.end = this.value.slice(4)\n\n# In:  {"value":["foo","bar","baz","buz","bev"]}\n# Out: {"beginning":["foo","bar"],"end":["bev"]}\n')),Object(r.b)("p",null,"A negative low index can be used, indicating an offset from the end of the sequence. If the low index is greater than the length of the sequence then an empty result is returned."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.last_chunk = this.value.slice(-2)\nroot.the_rest = this.value.slice(0, -2)\n\n# In:  {"value":["foo","bar","baz","buz","bev"]}\n# Out: {"last_chunk":["buz","bev"],"the_rest":["foo","bar","baz"]}\n')),Object(r.b)("h3",{id:"sum"},Object(r.b)("inlineCode",{parentName:"h3"},"sum")),Object(r.b)("p",null,"Sum the numerical values of an array."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.sum = this.foo.sum()\n\n# In:  {"foo":[3,8,4]}\n# Out: {"sum":15}\n')),Object(r.b)("h3",{id:"unique"},Object(r.b)("inlineCode",{parentName:"h3"},"unique")),Object(r.b)("p",null,"Attempts to remove duplicate values from an array. The array may contain a combination of different value types, but numbers and strings are checked separately (",Object(r.b)("inlineCode",{parentName:"p"},'"5"')," is a different element to ",Object(r.b)("inlineCode",{parentName:"p"},"5"),")."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.uniques = this.foo.unique()\n\n# In:  {"foo":["a","b","a","c"]}\n# Out: {"uniques":["a","b","c"]}\n')),Object(r.b)("h3",{id:"values"},Object(r.b)("inlineCode",{parentName:"h3"},"values")),Object(r.b)("p",null,"Returns the values of an object as an array. The order of the resulting array will be random."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.foo_vals = this.foo.values().sort()\n\n# In:  {"foo":{"bar":1,"baz":2}}\n# Out: {"foo_vals":[1,2]}\n')),Object(r.b)("h3",{id:"without"},Object(r.b)("inlineCode",{parentName:"h3"},"without")),Object(r.b)("p",null,"Returns an object where one or more ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/configuration/field_paths"}),"field path")," arguments are removed. Each path specifies a specific field to be deleted from the input object, allowing for nested fields."),Object(r.b)("p",null,"If a key within a nested path does not exist or is not an object then it is not removed."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root = this.without("inner.a","inner.c","d")\n\n# In:  {"inner":{"a":"first","b":"second","c":"third"},"d":"fourth","e":"fifth"}\n# Out: {"e":"fifth","inner":{"b":"second"}}\n')),Object(r.b)("h3",{id:"join"},Object(r.b)("inlineCode",{parentName:"h3"},"join")),Object(r.b)("p",null,"Join an array of strings with an optional delimiter into a single string."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.joined_words = this.words.join()\nroot.joined_numbers = this.numbers.map_each(this.string()).join(",")\n\n# In:  {"words":["hello","world"],"numbers":[3,8,11]}\n# Out: {"joined_numbers":"3,8,11","joined_words":"helloworld"}\n')),Object(r.b)("h2",{id:"parsing"},"Parsing"),Object(r.b)("h3",{id:"parse_csv"},Object(r.b)("inlineCode",{parentName:"h3"},"parse_csv")),Object(r.b)("p",null,"Attempts to parse a string into an array of objects by following the CSV format described in RFC 4180. The first line is assumed to be a header row, which determines the keys of values in each object."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.orders = this.orders.parse_csv()\n\n# In:  {"orders":"foo,bar\\nfoo 1,bar 1\\nfoo 2,bar 2"}\n# Out: {"orders":[{"bar":"bar 1","foo":"foo 1"},{"bar":"bar 2","foo":"foo 2"}]}\n')),Object(r.b)("h3",{id:"parse_json"},Object(r.b)("inlineCode",{parentName:"h3"},"parse_json")),Object(r.b)("p",null,"Attempts to parse a string as a JSON document and returns the result."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.doc = this.doc.parse_json()\n\n# In:  {"doc":"{\\"foo\\":\\"bar\\"}"}\n# Out: {"doc":{"foo":"bar"}}\n')),Object(r.b)("h3",{id:"parse_xml"},Object(r.b)("inlineCode",{parentName:"h3"},"parse_xml")),Object(r.b)("p",null,"BETA: This method is mostly stable but breaking changes could still be made outside of major version releases if a fundamental problem with it is found."),Object(r.b)("p",null,"Attempts to parse a string as an XML document and returns a structured result, where elements appear as keys of an object according to the following rules:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"If an element contains attributes they are parsed by prefixing a hyphen, ",Object(r.b)("inlineCode",{parentName:"li"},"-"),", to the attribute label."),Object(r.b)("li",{parentName:"ul"},"If the element is a simple element and has attributes, the element value is given the key ",Object(r.b)("inlineCode",{parentName:"li"},"#text"),"."),Object(r.b)("li",{parentName:"ul"},"XML comments, directives, and process instructions are ignored."),Object(r.b)("li",{parentName:"ul"},"When elements are repeated the resulting JSON value is an array.")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.doc = this.doc.parse_xml()\n\n# In:  {"doc":"<root><title>This is a title</title><content>This is some content</content></root>"}\n# Out: {"doc":{"root":{"content":"This is some content","title":"This is a title"}}}\n')),Object(r.b)("h2",{id:"encoding-and-encryption"},"Encoding and Encryption"),Object(r.b)("h3",{id:"encode"},Object(r.b)("inlineCode",{parentName:"h3"},"encode")),Object(r.b)("p",null,"Encodes a string or byte array target according to a chosen scheme and returns a string result. Available schemes are: ",Object(r.b)("inlineCode",{parentName:"p"},"base64"),", ",Object(r.b)("inlineCode",{parentName:"p"},"base64url"),", ",Object(r.b)("inlineCode",{parentName:"p"},"hex"),", ",Object(r.b)("inlineCode",{parentName:"p"},"ascii85"),", ",Object(r.b)("inlineCode",{parentName:"p"},"z85"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.encoded = this.value.encode("hex")\n\n# In:  {"value":"hello world"}\n# Out: {"encoded":"68656c6c6f20776f726c64"}\n')),Object(r.b)("h3",{id:"decode"},Object(r.b)("inlineCode",{parentName:"h3"},"decode")),Object(r.b)("p",null,"Decodes an encoded string target according to a chosen scheme and returns the result as a byte array. When mapping the result to a JSON field the value should be cast to a string using the method ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#string"}),Object(r.b)("inlineCode",{parentName:"a"},"string")),", or encoded using the method ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#encode"}),Object(r.b)("inlineCode",{parentName:"a"},"encode")),", otherwise it will be base64 encoded by default."),Object(r.b)("p",null,"Available schemes are: ",Object(r.b)("inlineCode",{parentName:"p"},"base64"),", ",Object(r.b)("inlineCode",{parentName:"p"},"base64url"),", ",Object(r.b)("inlineCode",{parentName:"p"},"hex"),", ",Object(r.b)("inlineCode",{parentName:"p"},"ascii85"),", ",Object(r.b)("inlineCode",{parentName:"p"},"z85"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.decoded = this.value.decode("hex").string()\n\n# In:  {"value":"68656c6c6f20776f726c64"}\n# Out: {"decoded":"hello world"}\n')),Object(r.b)("h3",{id:"encrypt_aes"},Object(r.b)("inlineCode",{parentName:"h3"},"encrypt_aes")),Object(r.b)("p",null,"Encrypts a string or byte array target according to a chosen AES encryption method and returns a string result. The algorithms require a key and an initialization vector / nonce. Available schemes are: ",Object(r.b)("inlineCode",{parentName:"p"},"ctr"),", ",Object(r.b)("inlineCode",{parentName:"p"},"ofb"),", ",Object(r.b)("inlineCode",{parentName:"p"},"cbc"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'let key = "2b7e151628aed2a6abf7158809cf4f3c".decode("hex")\nlet vector = "f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff".decode("hex")\nroot.encrypted = this.value.encrypt_aes("ctr", $key, $vector).encode("hex")\n\n# In:  {"value":"hello world!"}\n# Out: {"encrypted":"84e9b31ff7400bdf80be7254"}\n')),Object(r.b)("h3",{id:"decrypt_aes"},Object(r.b)("inlineCode",{parentName:"h3"},"decrypt_aes")),Object(r.b)("p",null,"Decrypts an encrypted string or byte array target according to a chosen AES encryption method and returns the result as a byte array. The algorithms require a key and an initialization vector / nonce. Available schemes are: ",Object(r.b)("inlineCode",{parentName:"p"},"ctr"),", ",Object(r.b)("inlineCode",{parentName:"p"},"ofb"),", ",Object(r.b)("inlineCode",{parentName:"p"},"cbc"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'let key = "2b7e151628aed2a6abf7158809cf4f3c".decode("hex")\nlet vector = "f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff".decode("hex")\nroot.decrypted = this.value.decode("hex").decrypt_aes("ctr", $key, $vector).string()\n\n# In:  {"value":"84e9b31ff7400bdf80be7254"}\n# Out: {"decrypted":"hello world!"}\n')),Object(r.b)("h3",{id:"hash"},Object(r.b)("inlineCode",{parentName:"h3"},"hash")),Object(r.b)("p",null,"Hashes a string or byte array according to a chosen algorithm and returns the result as a byte array. When mapping the result to a JSON field the value should be cast to a string using the method ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#string"}),Object(r.b)("inlineCode",{parentName:"a"},"string")),", or encoded using the method ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#encode"}),Object(r.b)("inlineCode",{parentName:"a"},"encode")),", otherwise it will be base64 encoded by default."),Object(r.b)("p",null,"Available algorithms are: ",Object(r.b)("inlineCode",{parentName:"p"},"hmac_sha1"),", ",Object(r.b)("inlineCode",{parentName:"p"},"hmac_sha256"),", ",Object(r.b)("inlineCode",{parentName:"p"},"hmac_sha512"),", ",Object(r.b)("inlineCode",{parentName:"p"},"md5"),", ",Object(r.b)("inlineCode",{parentName:"p"},"sha1"),", ",Object(r.b)("inlineCode",{parentName:"p"},"sha256"),", ",Object(r.b)("inlineCode",{parentName:"p"},"sha512"),", ",Object(r.b)("inlineCode",{parentName:"p"},"xxhash64"),"."),Object(r.b)("p",null,"The following algorithms require a key, which is specified as a second argument: ",Object(r.b)("inlineCode",{parentName:"p"},"hmac_sha1"),", ",Object(r.b)("inlineCode",{parentName:"p"},"hmac_sha256"),", ",Object(r.b)("inlineCode",{parentName:"p"},"hmac_sha512"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-coffee"}),'root.h1 = this.value.hash("sha1").encode("hex")\nroot.h2 = this.value.hash("hmac_sha1","static-key").encode("hex")\n\n# In:  {"value":"hello world"}\n# Out: {"h1":"2aae6c35c94fcfb415dbe95f408b9ce91ee846ed","h2":"d87e5f068fa08fe90bb95bc7c8344cb809179d76"}\n')))}s.isMDXComponent=!0},411:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return h}));var n=a(0),o=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var b=o.a.createContext({}),s=function(e){var t=o.a.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=s(e.components);return o.a.createElement(b.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},p=o.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),d=s(a),p=n,h=d["".concat(l,".").concat(p)]||d[p]||u[p]||r;return a?o.a.createElement(h,i(i({ref:t},b),{},{components:a})):o.a.createElement(h,i({ref:t},b))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,l=new Array(r);l[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var b=2;b<r;b++)l[b]=a[b];return o.a.createElement.apply(null,l)}return o.a.createElement.apply(null,a)}p.displayName="MDXCreateElement"},412:function(e,t,a){"use strict";function n(e){var t,a,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=n(e[t]))&&(o&&(o+=" "),o+=a);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}t.a=function(){for(var e,t,a=0,o="";a<arguments.length;)(e=arguments[a++])&&(t=n(e))&&(o&&(o+=" "),o+=t);return o}},413:function(e,t,a){"use strict";var n=a(0),o=a(414);t.a=function(){var e=Object(n.useContext)(o.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},414:function(e,t,a){"use strict";var n=a(0),o=Object(n.createContext)(void 0);t.a=o},415:function(e,t,a){"use strict";var n=a(0),o=a.n(n),r=a(413),l=a(412),i=a(56),c=a.n(i),b=37,s=39;t.a=function(e){var t=e.lazy,a=e.block,i=e.defaultValue,d=e.values,u=e.groupId,p=e.className,h=Object(r.a)(),m=h.tabGroupChoices,f=h.setTabGroupChoices,O=Object(n.useState)(i),j=O[0],g=O[1],v=n.Children.toArray(e.children);if(null!=u){var N=m[u];null!=N&&N!==j&&d.some((function(e){return e.value===N}))&&g(N)}var y=function(e){g(e),null!=u&&f(u,e)},_=[];return o.a.createElement("div",null,o.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(l.a)("tabs",{"tabs--block":a},p)},d.map((function(e){var t=e.value,a=e.label;return o.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":j===t,className:Object(l.a)("tabs__item",c.a.tabItem,{"tabs__item--active":j===t}),key:t,ref:function(e){return _.push(e)},onKeyDown:function(e){!function(e,t,a){switch(a.keyCode){case s:!function(e,t){var a=e.indexOf(t)+1;e[a]?e[a].focus():e[0].focus()}(e,t);break;case b:!function(e,t){var a=e.indexOf(t)-1;e[a]?e[a].focus():e[e.length-1].focus()}(e,t)}}(_,e.target,e)},onFocus:function(){return y(t)},onClick:function(){y(t)}},a)}))),t?Object(n.cloneElement)(v.filter((function(e){return e.props.value===j}))[0],{className:"margin-vert--md"}):o.a.createElement("div",{className:"margin-vert--md"},v.map((function(e,t){return Object(n.cloneElement)(e,{key:t,hidden:e.props.value!==j})}))))}},416:function(e,t,a){"use strict";var n=a(3),o=a(0),r=a.n(o);t.a=function(e){var t=e.children,a=e.hidden,o=e.className;return r.a.createElement("div",Object(n.a)({role:"tabpanel"},{hidden:a,className:o}),t)}}}]);