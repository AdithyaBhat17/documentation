(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{123:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return u}));var o=n(3),a=n(7),r=(n(0),n(205)),i={title:"iOS Chat SDK",sidebar_label:"iOS Chat SDK"},c={unversionedId:"documentation/channel-configuration/ios",id:"documentation/channel-configuration/ios",isDocsHomePage:!1,title:"iOS Chat SDK",description:"Setup",source:"@site/docs/documentation/channel-configuration/ios.md",slug:"/documentation/channel-configuration/ios",permalink:"/docs/documentation/channel-configuration/ios",version:"current",sidebar_label:"iOS Chat SDK",sidebar:"documentation",previous:{title:"Android Chat SDK",permalink:"/docs/documentation/channel-configuration/android"},next:{title:"WhatsApp",permalink:"/docs/documentation/channel-configuration/whatsapp"}},l=[{value:"Setup",id:"setup",children:[]},{value:"Example",id:"example",children:[{value:"Configuration References",id:"configuration-references",children:[]},{value:"Payload References",id:"payload-references",children:[]}]},{value:"Features BETA",id:"features-beta",children:[]}],s={toc:l};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"setup"},"Setup"),Object(r.b)("p",null,"Clone the ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/yellowmessenger/webview-sdk-ios"}),"repository")," then add the following files in your xcode project by going to ",Object(r.b)("strong",{parentName:"p"},"File>Add Files to < Project-Name >")," "),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"1. ",Object(r.b)("a",Object(o.a)({parentName:"strong"},{href:"YmSDK.swift"}),"YmSDK.swift")),Object(r.b)("br",{parentName:"p"}),"\n",Object(r.b)("strong",{parentName:"p"},"2. ",Object(r.b)("a",Object(o.a)({parentName:"strong"},{href:"YmEvents.swift"}),"YmEvents.swift")),Object(r.b)("br",{parentName:"p"}),"\n",Object(r.b)("strong",{parentName:"p"},"3. ",Object(r.b)("a",Object(o.a)({parentName:"strong"},{href:"YmBotPlugin.swift"}),"YmBotPlugin.swift")),"  "),Object(r.b)("p",null,"Also add the the icons for mic button and close button in assets."),Object(r.b)("h2",{id:"example"},"Example"),Object(r.b)("p",null,"Example swift code to use the plugin"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'//Add the following function in ViewController.swift\n    func openWebView(_ sender: Any) {\n        //Set Configuration data\n        let config:[String:String] = ["BotId" : "<BOT-ID>"]\n\n        //Initialize the plugin with config values.\n        YmBotPlugin.shared.initPlugin(config: config) //Step 1\n\n        //Set EventListener to handle bot events.\n        YmBotPlugin.shared.events.listenTo(eventName: "BotEvent", action: {\n            (information:Any?) in\n            if let info = information as? Dictionary<String, String> {\n                print("Closing Bot")\n                //To stop chatbot use the following function\n                YmBotPlugin.shared.stopChatBot() //Step 5\n                switch info["code"] {\n                case "login-user":\n                    //Each event has two keys, "code" and "data". Use info["code"] or info["data"] to access the values\n                    //The following code restarts the chatbot with different payload values.\n                    let payloads:[String:String] = ["UserState":"LoggedIn"]\n                    YmBotPlugin.shared.setPayload(payload: payloads)\n                    YmBotPlugin.shared.startChatBot(view: self.view)\n                //Add other cases acording to need.\n                default:\n                    print("Unknown Event")\n                }\n            }\n        }) // Step 2\n        \n        //Setting payload values\n        let payloads:[String:String] = ["UserState":"Anonymous"]\n\n        //Pass payload to the bot\n        YmBotPlugin.shared.setPayload(payload: payloads) //Step 3\n\n        //Start the chatbot webview\n        YmBotPlugin.shared.startChatBot(view: self.view) //Step 4\n    }\n')),Object(r.b)("h3",{id:"configuration-references"},"Configuration References"),Object(r.b)("p",null,"You can set the following configuration on the bot"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'"BotId" : "<BOT_ID_FROM_YM>",\n"EnableHistory" : "<true or false as String>",\n"EnableSpeech" : "<true or false as String>"\n')),Object(r.b)("h3",{id:"payload-references"},"Payload References"),Object(r.b)("p",null,"You can set payload values according to requirement. Following are some sample payloads that you can set."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'"userFullName":"<User-Name>", \n"token":"<Access-Token>"\n')),Object(r.b)("h2",{id:"features-beta"},"Features ","[BETA]"),Object(r.b)("p",null,"To use the voice first feature, add the following to your info.plist file if the permissions are not added already."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"<key>NSMicrophoneUsageDescription</key>  \n<string>Your microphone will be used to record your speech when you use the Voice feature.</string>\n<key>NSSpeechRecognitionUsageDescription</key>  \n<string>Speech recognition will be used to determine which words you speak into this device&apos;s microphone.</string>\n")),Object(r.b)("p",null,"Then add the following key to configuration: "),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'let config:[String:String] = ["BotId" : "<BOT-ID>", "EnableSpeech":"true"]\n')))}u.isMDXComponent=!0},205:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return f}));var o=n(0),a=n.n(o);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),u=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=u(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(n),b=o,f=p["".concat(i,".").concat(b)]||p[b]||d[b]||r;return n?a.a.createElement(f,c(c({ref:t},s),{},{components:n})):a.a.createElement(f,c({ref:t},s))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=b;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<r;s++)i[s]=n[s];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);