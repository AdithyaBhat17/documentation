(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{212:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(3),o=n(7),r=(n(0),n(411)),i={title:"Interpolation"},c={unversionedId:"configuration/interpolation",id:"configuration/interpolation",isDocsHomePage:!1,title:"Interpolation",description:"Benthos allows you to dynamically set config fields with environment variables anywhere within a config file using the syntax ${} (or ${",source:"@site/docs/configuration/interpolation.md",slug:"/configuration/interpolation",permalink:"/docs/configuration/interpolation",editUrl:"https://github.com/Jeffail/benthos/edit/master/website/docs/configuration/interpolation.md",version:"current",sidebar:"docs",previous:{title:"Error Handling",permalink:"/docs/configuration/error_handling"},next:{title:"Field Paths",permalink:"/docs/configuration/field_paths"}},l=[{value:"Bloblang Queries",id:"bloblang-queries",children:[]},{value:"Examples",id:"examples",children:[{value:"Reference Metadata",id:"reference-metadata",children:[]},{value:"Coalesce and Mapping",id:"coalesce-and-mapping",children:[]},{value:"Delayed Processing",id:"delayed-processing",children:[]}]}],s={toc:l};function p(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Benthos allows you to dynamically set config fields with environment variables anywhere within a config file using the syntax ",Object(r.b)("inlineCode",{parentName:"p"},"${<variable-name>}")," (or ",Object(r.b)("inlineCode",{parentName:"p"},"${<variable-name>:<default-value>}")," in order to specify a default value). This is useful for setting environment specific fields such as addresses:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'input:\n  kafka:\n    addresses: [ "${BROKERS}" ]\n    consumer_group: benthos_bridge_consumer\n    topics: [ "haha_business" ]\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),'BROKERS="foo:9092,bar:9092" benthos -c ./config.yaml\n')),Object(r.b)("p",null,"If a literal string is required that matches this pattern (",Object(r.b)("inlineCode",{parentName:"p"},"${foo}"),") you can escape it with double brackets. For example, the string ",Object(r.b)("inlineCode",{parentName:"p"},"${{foo}}")," is read as the literal ",Object(r.b)("inlineCode",{parentName:"p"},"${foo}"),"."),Object(r.b)("h2",{id:"bloblang-queries"},"Bloblang Queries"),Object(r.b)("p",null,"Some Benthos fields also support ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/guides/bloblang/about"}),"Bloblang")," function interpolations, which are much more powerful expressions that allow you to query the contents of messages and perform arithmetic. The syntax of a function interpolation is ",Object(r.b)("inlineCode",{parentName:"p"},"${!<bloblang expression>}"),", where the contents are a bloblang query (the right-hand-side of a bloblang map) including a range of ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/guides/bloblang/about#functions"}),"functions"),". For example, with the following config:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'output:\n  kafka:\n    addresses: [ "TODO:6379" ]\n    topic: \'dope-${! json("topic") }\'\n')),Object(r.b)("p",null,"A message with the contents ",Object(r.b)("inlineCode",{parentName:"p"},'{"topic":"foo","message":"hello world"}')," would be routed to the Kafka topic ",Object(r.b)("inlineCode",{parentName:"p"},"dope-foo"),"."),Object(r.b)("p",null,"If a literal string is required that matches this pattern (",Object(r.b)("inlineCode",{parentName:"p"},"${!foo}"),") then, similar to environment variables, you can escape it with double brackets. For example, the string ",Object(r.b)("inlineCode",{parentName:"p"},"${{!foo}}")," would be read as the literal ",Object(r.b)("inlineCode",{parentName:"p"},"${!foo}"),"."),Object(r.b)("p",null,"Bloblang supports arithmetic, boolean operators, coalesce and mapping expressions. For more in-depth details about the language ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/guides/bloblang/about"}),"check out the docs"),"."),Object(r.b)("h2",{id:"examples"},"Examples"),Object(r.b)("h3",{id:"reference-metadata"},"Reference Metadata"),Object(r.b)("p",null,"A common usecase for interpolated functions is dynamic routing at the output level using metadata:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'output:\n  kafka:\n    addresses: [ TODO ]\n    topic: ${! meta("output_topic") }\n    key: ${! meta("key") }\n')),Object(r.b)("h3",{id:"coalesce-and-mapping"},"Coalesce and Mapping"),Object(r.b)("p",null,"Bloblang supports coalesce and mapping, which makes it easy to extract values from slightly varying data structures:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"pipeline:\n  processors:\n    - cache:\n        resource: foocache\n        operator: set\n        key: '${! json().message.(foo | bar).id }'\n        value: '${! content() }'\n")),Object(r.b)("p",null,"Here's a map of inputs to resulting values:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),'{"foo":{"a":{"baz":"from_a"},"c":{"baz":"from_c"}}} -> from_a\n{"foo":{"b":{"baz":"from_b"},"c":{"baz":"from_c"}}} -> from_b\n{"foo":{"b":null,"c":{"baz":"from_c"}}}             -> from_c\n')),Object(r.b)("h3",{id:"delayed-processing"},"Delayed Processing"),Object(r.b)("p",null,"We have a stream of JSON documents each with a unix timestamp field ",Object(r.b)("inlineCode",{parentName:"p"},"doc.received_at")," which is set when our platform receives it. We wish to only process messages an hour ",Object(r.b)("em",{parentName:"p"},"after")," they were received. We can achieve this by running the ",Object(r.b)("inlineCode",{parentName:"p"},"sleep")," processor using an interpolation function to calculate the seconds needed to wait for:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"pipeline:\n  processors:\n  - sleep:\n      duration: '${! 3600 - ( timestamp_unix() - json(\"doc.created_at\") ) }s'\n")),Object(r.b)("p",null,"If the calculated result is less than or equal to zero the processor does not sleep at all. If the value of ",Object(r.b)("inlineCode",{parentName:"p"},"doc.created_at")," is a string Benthos will make a best attempt to parse it as a number."))}p.isMDXComponent=!0},411:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),p=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=p(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=p(n),d=a,m=b["".concat(i,".").concat(d)]||b[d]||u[d]||r;return n?o.a.createElement(m,c(c({ref:t},s),{},{components:n})):o.a.createElement(m,c({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<r;s++)i[s]=n[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);