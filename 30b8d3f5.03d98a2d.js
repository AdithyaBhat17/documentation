(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{145:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return b})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return u}));var a=t(3),r=t(7),o=(t(0),t(411)),c=t(415),i=t(416),s={title:"broker",type:"input",status:"stable",categories:["Utility"]},b={unversionedId:"components/inputs/broker",id:"components/inputs/broker",isDocsHomePage:!1,title:"broker",description:"\x3c!--",source:"@site/docs/components/inputs/broker.md",slug:"/components/inputs/broker",permalink:"/docs/components/inputs/broker",editUrl:"https://github.com/Jeffail/benthos/edit/master/website/docs/components/inputs/broker.md",version:"current",sidebar:"docs",previous:{title:"bloblang",permalink:"/docs/components/inputs/bloblang"},next:{title:"csv",permalink:"/docs/components/inputs/csv"}},l=[{value:"Batching",id:"batching",children:[]},{value:"Processors",id:"processors",children:[]},{value:"Fields",id:"fields",children:[{value:"<code>copies</code>",id:"copies",children:[]},{value:"<code>inputs</code>",id:"inputs",children:[]},{value:"<code>batching</code>",id:"batching-1",children:[]},{value:"<code>batching.count</code>",id:"batchingcount",children:[]},{value:"<code>batching.byte_size</code>",id:"batchingbyte_size",children:[]},{value:"<code>batching.period</code>",id:"batchingperiod",children:[]},{value:"<code>batching.check</code>",id:"batchingcheck",children:[]},{value:"<code>batching.processors</code>",id:"batchingprocessors",children:[]}]}],p={toc:l};function u(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Allows you to combine multiple inputs, where each input will be read in\nparallel."),Object(o.b)(c.a,{defaultValue:"common",values:[{label:"Common",value:"common"},{label:"Advanced",value:"advanced"}],mdxType:"Tabs"},Object(o.b)(i.a,{value:"common",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'# Common config fields, showing default values\ninput:\n  broker:\n    copies: 1\n    inputs: []\n    batching:\n      count: 0\n      byte_size: 0\n      period: ""\n      check: ""\n'))),Object(o.b)(i.a,{value:"advanced",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'# All config fields, showing default values\ninput:\n  broker:\n    copies: 1\n    inputs: []\n    batching:\n      count: 0\n      byte_size: 0\n      period: ""\n      check: ""\n      processors: []\n')))),Object(o.b)("p",null,"A broker type is configured with its own list of input configurations and a\nfield to specify how many copies of the list of inputs should be created."),Object(o.b)("p",null,"Adding more input types allows you to merge streams from multiple sources into\none. For example, reading from both RabbitMQ and Kafka:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"input:\n  broker:\n    copies: 1\n    inputs:\n    - amqp:\n        url: amqp://guest:guest@localhost:5672/\n        consumer_tag: benthos-consumer\n        queue: benthos-queue\n\n      # Optional list of input specific processing steps\n      processors:\n        - jmespath:\n            query: '{ message: @, meta: { link_count: length(links) } }'\n\n    - kafka:\n        addresses:\n        - localhost:9092\n        client_id: benthos_kafka_input\n        consumer_group: benthos_consumer_group\n        partition: 0\n        topic: benthos_stream\n")),Object(o.b)("p",null,"If the number of copies is greater than zero the list will be copied that number\nof times. For example, if your inputs were of type foo and bar, with 'copies'\nset to '2', you would end up with two 'foo' inputs and two 'bar' inputs."),Object(o.b)("h3",{id:"batching"},"Batching"),Object(o.b)("p",null,"It's possible to configure a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/configuration/batching#batch-policy"}),"batch policy"),"\nwith a broker using the ",Object(o.b)("inlineCode",{parentName:"p"},"batching")," fields. When doing this the feeds\nfrom all child inputs are combined. Some inputs do not support broker based\nbatching and specify this in their documentation."),Object(o.b)("h3",{id:"processors"},"Processors"),Object(o.b)("p",null,"It is possible to configure ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/components/processors/about"}),"processors")," at\nthe broker level, where they will be applied to ",Object(o.b)("em",{parentName:"p"},"all")," child inputs, as well as\non the individual child inputs. If you have processors at both the broker level\n",Object(o.b)("em",{parentName:"p"},"and")," on child inputs then the broker processors will be applied ",Object(o.b)("em",{parentName:"p"},"after")," the\nchild nodes processors."),Object(o.b)("h2",{id:"fields"},"Fields"),Object(o.b)("h3",{id:"copies"},Object(o.b)("inlineCode",{parentName:"h3"},"copies")),Object(o.b)("p",null,"Whatever is specified within ",Object(o.b)("inlineCode",{parentName:"p"},"inputs")," will be created this many times."),Object(o.b)("p",null,"Type: ",Object(o.b)("inlineCode",{parentName:"p"},"number"),Object(o.b)("br",{parentName:"p"}),"\n","Default: ",Object(o.b)("inlineCode",{parentName:"p"},"1"),"  "),Object(o.b)("h3",{id:"inputs"},Object(o.b)("inlineCode",{parentName:"h3"},"inputs")),Object(o.b)("p",null,"A list of inputs to create."),Object(o.b)("p",null,"Type: ",Object(o.b)("inlineCode",{parentName:"p"},"array"),Object(o.b)("br",{parentName:"p"}),"\n","Default: ",Object(o.b)("inlineCode",{parentName:"p"},"[]"),"  "),Object(o.b)("h3",{id:"batching-1"},Object(o.b)("inlineCode",{parentName:"h3"},"batching")),Object(o.b)("p",null,"Allows you to configure a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/configuration/batching"}),"batching policy"),"."),Object(o.b)("p",null,"Type: ",Object(o.b)("inlineCode",{parentName:"p"},"object"),"  "),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'# Examples\n\nbatching:\n  byte_size: 5000\n  count: 0\n  period: 1s\n\nbatching:\n  count: 10\n  period: 1s\n\nbatching:\n  check: this.contains("END BATCH")\n  count: 0\n  period: 1m\n')),Object(o.b)("h3",{id:"batchingcount"},Object(o.b)("inlineCode",{parentName:"h3"},"batching.count")),Object(o.b)("p",null,"A number of messages at which the batch should be flushed. If ",Object(o.b)("inlineCode",{parentName:"p"},"0")," disables count based batching."),Object(o.b)("p",null,"Type: ",Object(o.b)("inlineCode",{parentName:"p"},"number"),Object(o.b)("br",{parentName:"p"}),"\n","Default: ",Object(o.b)("inlineCode",{parentName:"p"},"0"),"  "),Object(o.b)("h3",{id:"batchingbyte_size"},Object(o.b)("inlineCode",{parentName:"h3"},"batching.byte_size")),Object(o.b)("p",null,"An amount of bytes at which the batch should be flushed. If ",Object(o.b)("inlineCode",{parentName:"p"},"0")," disables size based batching."),Object(o.b)("p",null,"Type: ",Object(o.b)("inlineCode",{parentName:"p"},"number"),Object(o.b)("br",{parentName:"p"}),"\n","Default: ",Object(o.b)("inlineCode",{parentName:"p"},"0"),"  "),Object(o.b)("h3",{id:"batchingperiod"},Object(o.b)("inlineCode",{parentName:"h3"},"batching.period")),Object(o.b)("p",null,"A period in which an incomplete batch should be flushed regardless of its size."),Object(o.b)("p",null,"Type: ",Object(o.b)("inlineCode",{parentName:"p"},"string"),Object(o.b)("br",{parentName:"p"}),"\n","Default: ",Object(o.b)("inlineCode",{parentName:"p"},'""'),"  "),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"# Examples\n\nperiod: 1s\n\nperiod: 1m\n\nperiod: 500ms\n")),Object(o.b)("h3",{id:"batchingcheck"},Object(o.b)("inlineCode",{parentName:"h3"},"batching.check")),Object(o.b)("p",null,"A ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/guides/bloblang/about/"}),"Bloblang query")," that should return a boolean value indicating whether a message should end a batch."),Object(o.b)("p",null,"Type: ",Object(o.b)("inlineCode",{parentName:"p"},"string"),Object(o.b)("br",{parentName:"p"}),"\n","Default: ",Object(o.b)("inlineCode",{parentName:"p"},'""'),"  "),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),'# Examples\n\ncheck: this.type == "end_of_transaction"\n')),Object(o.b)("h3",{id:"batchingprocessors"},Object(o.b)("inlineCode",{parentName:"h3"},"batching.processors")),Object(o.b)("p",null,"A list of ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/components/processors/about"}),"processors")," to apply to a batch as it is flushed. This allows you to aggregate and archive the batch however you see fit. Please note that all resulting messages are flushed as a single batch, therefore splitting the batch into smaller batches using these processors is a no-op."),Object(o.b)("p",null,"Type: ",Object(o.b)("inlineCode",{parentName:"p"},"array"),Object(o.b)("br",{parentName:"p"}),"\n","Default: ",Object(o.b)("inlineCode",{parentName:"p"},"[]"),"  "),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yaml"}),"# Examples\n\nprocessors:\n  - archive:\n      format: lines\n\nprocessors:\n  - archive:\n      format: json_array\n\nprocessors:\n  - merge_json: {}\n")))}u.isMDXComponent=!0},411:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var b=r.a.createContext({}),l=function(e){var n=r.a.useContext(b),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.a.createElement(b.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,b=s(e,["components","mdxType","originalType","parentName"]),p=l(t),d=a,m=p["".concat(c,".").concat(d)]||p[d]||u[d]||o;return t?r.a.createElement(m,i(i({ref:n},b),{},{components:t})):r.a.createElement(m,i({ref:n},b))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,c=new Array(o);c[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var b=2;b<o;b++)c[b]=t[b];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},412:function(e,n,t){"use strict";function a(e){var n,t,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=a(e[n]))&&(r&&(r+=" "),r+=t);else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}n.a=function(){for(var e,n,t=0,r="";t<arguments.length;)(e=arguments[t++])&&(n=a(e))&&(r&&(r+=" "),r+=n);return r}},413:function(e,n,t){"use strict";var a=t(0),r=t(414);n.a=function(){var e=Object(a.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},414:function(e,n,t){"use strict";var a=t(0),r=Object(a.createContext)(void 0);n.a=r},415:function(e,n,t){"use strict";var a=t(0),r=t.n(a),o=t(413),c=t(412),i=t(56),s=t.n(i),b=37,l=39;n.a=function(e){var n=e.lazy,t=e.block,i=e.defaultValue,p=e.values,u=e.groupId,d=e.className,m=Object(o.a)(),h=m.tabGroupChoices,f=m.setTabGroupChoices,O=Object(a.useState)(i),j=O[0],g=O[1],y=a.Children.toArray(e.children);if(null!=u){var v=h[u];null!=v&&v!==j&&p.some((function(e){return e.value===v}))&&g(v)}var N=function(e){g(e),null!=u&&f(u,e)},w=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(c.a)("tabs",{"tabs--block":t},d)},p.map((function(e){var n=e.value,t=e.label;return r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":j===n,className:Object(c.a)("tabs__item",s.a.tabItem,{"tabs__item--active":j===n}),key:n,ref:function(e){return w.push(e)},onKeyDown:function(e){!function(e,n,t){switch(t.keyCode){case l:!function(e,n){var t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()}(e,n);break;case b:!function(e,n){var t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()}(e,n)}}(w,e.target,e)},onFocus:function(){return N(n)},onClick:function(){N(n)}},t)}))),n?Object(a.cloneElement)(y.filter((function(e){return e.props.value===j}))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},y.map((function(e,n){return Object(a.cloneElement)(e,{key:n,hidden:e.props.value!==j})}))))}},416:function(e,n,t){"use strict";var a=t(3),r=t(0),o=t.n(r);n.a=function(e){var n=e.children,t=e.hidden,r=e.className;return o.a.createElement("div",Object(a.a)({role:"tabpanel"},{hidden:t,className:r}),n)}}}]);