(window.webpackJsonp=window.webpackJsonp||[]).push([[329],{411:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return c})),a.d(t,"toc",(function(){return l})),a.d(t,"default",(function(){return b}));var n=a(3),r=a(7),o=(a(0),a(461)),i=["components"],s={title:"Ecommerce template",sidebar_label:"Ecommerce template"},c={unversionedId:"cookbooks/marketplace-templates/ecommerce-template",id:"cookbooks/marketplace-templates/ecommerce-template",isDocsHomePage:!1,title:"Ecommerce template",description:"Ecommerce template offers a highly efficient and valuable services for online businesses. It guides your customers through buying products. This includes adding a product to cart,  updating product quantity, adding more products, and proceeding to purchase. Post purchase, customers can track their order status. The template can handle common customer queries and helps connect with the support team if required.",source:"@site/docs/cookbooks/marketplace-templates/ecommerce-template.md",slug:"/cookbooks/marketplace-templates/ecommerce-template",permalink:"/docs/cookbooks/marketplace-templates/ecommerce-template",version:"current",sidebar_label:"Ecommerce template",sidebar:"cookbooks",previous:{title:"EdTech template",permalink:"/docs/cookbooks/marketplace-templates/edtech-template"},next:{title:"Custom Usecases",permalink:"/docs/cookbooks/inbox/custom-usecases"}},l=[{value:"Browse products",id:"browse-products",children:[]},{value:"Add to cart",id:"add-to-cart",children:[]},{value:"Edit cart",id:"edit-cart",children:[]},{value:"Clear cart",id:"clear-cart",children:[]},{value:"Buy now",id:"buy-now",children:[]},{value:"Razorpay payment status",id:"razorpay-payment-status",children:[]},{value:"Check order status",id:"check-order-status",children:[]},{value:"Queries and Concerns",id:"queries-and-concerns",children:[]},{value:"Build your own flows",id:"build-your-own-flows",children:[]}],p={toc:l};function b(e){var t=e.components,a=Object(r.a)(e,i);return Object(o.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Ecommerce template offers a highly efficient and valuable services for online businesses. It guides your customers through buying products. This includes adding a product to cart,  updating product quantity, adding more products, and proceeding to purchase. Post purchase, customers can track their order status. The template can handle common customer queries and helps connect with the support team if required. "),Object(o.b)("p",null,"You can use our platform to build custom flows for your business use cases. For example, promote products, show store location, showcase products from your database, enable single sign-on from your ecommerce site, and more."),Object(o.b)("p",null,"Here is the high level overview of the Ecommerce template:"),Object(o.b)("img",{src:"https://i.imgur.com/2mgM0ax.png",width:"80%"}),Object(o.b)("h3",{id:"browse-products"},"Browse products"),Object(o.b)("p",null,"The flow shows the list of product categories and products within each category and guides users through purchasing products."),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"https://i.imgur.com/MjXppCD.png",alt:null})),Object(o.b)("p",null,"Let\u2019s see the Browse products flow in detail:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Starts with the intent ",Object(o.b)("em",{parentName:"p"},"View available products"),"."),Object(o.b)("p",{parentName:"li"},Object(o.b)("img",{parentName:"p",src:"https://i.imgur.com/WrwlM5O.png",alt:null})))),Object(o.b)("ol",{start:2},Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Verifies channel"),": Applies the ",Object(o.b)("strong",{parentName:"li"},"Channel filter")," to check if the user is from YellowMessenger or from other channel. "),Object(o.b)("li",{parentName:"ol"},"Uses the ",Object(o.b)("strong",{parentName:"li"},"Function")," node to fetch the list of product categories from the  ",Object(o.b)("strong",{parentName:"li"},"Database"),".\nIf the channel is WhatsApp, it shows the list of product categories using the ",Object(o.b)("strong",{parentName:"li"},"WhatsApp list")," node. "),Object(o.b)("li",{parentName:"ol"},"On selecting the product category, it shows the list of products of that category.\nFor WhatsApp channel, it uses ",Object(o.b)("strong",{parentName:"li"},"Function"),", ",Object(o.b)("strong",{parentName:"li"},"Variables"),", and ",Object(o.b)("strong",{parentName:"li"},"Modifier")," nodes to display the list of products.\n",Object(o.b)("img",{parentName:"li",src:"https://i.imgur.com/SOGbfgb.png",alt:null}))),Object(o.b)("h3",{id:"add-to-cart"},"Add to cart"),Object(o.b)("p",null,"The flow starts when the bot user selects a product to add to the cart. The user can add each product along with the quantity and proceed to buying once all the required cart items are added. "),Object(o.b)("center",null,Object(o.b)("img",{src:"https://i.imgur.com/SEeelG6.png",alt:"drawing",width:"40%"})," ",Object(o.b)("img",{src:"https://i.imgur.com/8oojZJc.png",alt:"drawing",width:"40%"})),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Starts the flow")," when the user selects ",Object(o.b)("em",{parentName:"li"},"Add to cart")," on the ",Object(o.b)("strong",{parentName:"li"},"Browse products")," flow. "),Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Shows quantity"),": Each product is associated with the product ID. Based on the selected product, ",Object(o.b)("inlineCode",{parentName:"li"},"productId"),", ",Object(o.b)("a",{parentName:"li",href:"https://docs.yellow.ai/docs/platform_concepts/studio/build/nodes/logic-nodes/#1-condition"},"Condition node")," it shows an option to select the quantity (",Object(o.b)("strong",{parentName:"li"},"Quick replies")," for web and ",Object(o.b)("strong",{parentName:"li"},"WhatsApp list")," for WhatsApp).")),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"https://i.imgur.com/uBkNFAg.png",alt:null})),Object(o.b)("ol",{start:3},Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Adds to cart"),": Verifies the quantity and product ID and fetches the product from the database (",Object(o.b)("strong",{parentName:"li"},"Database")," node) and adds the item to cart (",Object(o.b)("inlineCode",{parentName:"li"},"addToCart")," function).")),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"https://i.imgur.com/uncWUhL.png",alt:null})),Object(o.b)("ol",{start:4},Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Shows cart summary"),": Calculates the cart price (Price associated with the Product ID * quantity = Total Price) and renders the cart details using the ",Object(o.b)("inlineCode",{parentName:"p"},"formatCartSummary")," ",Object(o.b)("strong",{parentName:"p"},"Function")," node along with these options (",Object(o.b)("strong",{parentName:"p"},"Quick replies"),") "),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"#linktotheflow"},"Buy now"),", ",Object(o.b)("a",{parentName:"li",href:"#linktotheflow"},"Edit cart"),", ",Object(o.b)("a",{parentName:"li",href:"#linktotheflow"},"Clear cart")," and ",Object(o.b)("a",{parentName:"li",href:"#linktotheflow"},"Add more products"),". It triggers the respective flow based on the input. ")))),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"https://i.imgur.com/wW9pPJP.png",alt:null})),Object(o.b)("h3",{id:"edit-cart"},"Edit cart"),Object(o.b)("p",null,"This flow allows users to edit the current cart details - change quantity or remove product from the cart."),Object(o.b)("center",null,Object(o.b)("img",{src:"https://i.imgur.com/ityexxS.png",alt:"drawing",width:"40%"})),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Starts when the user selects "),"Edit cart",Object(o.b)("strong",{parentName:"li"}," is selected on the "),"Add to cart** flow. "),Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Verifies cart items"),": Checks if the cart is empty using the ",Object(o.b)("inlineCode",{parentName:"li"},"IsCartEmpty")," (",Object(o.b)("strong",{parentName:"li"},"Function")," and ",Object(o.b)("strong",{parentName:"li"},"Condition")," nodes). ",Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre"},"    * If it is empty, the user will be directed to the [Browse products flow](). \n    * If the cart is not empty, it shows the current cart details (`ShowCart` function) of the user.\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Edit cart"),": Uses the ",Object(o.b)("strong",{parentName:"li"},"Carousel")," node to display the summary of the existing cart (all the items with quantity and price) along with the options to edit the item quantity and remove the item (for each item with a unique product ID). It shows up relevant options based on the user input (",Object(o.b)("strong",{parentName:"li"},"Condition")," node). "),Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Edit item"),": Allows editing the quantity (for that product ID) using ",Object(o.b)("strong",{parentName:"li"},"Quick replies")," (and ",Object(o.b)("strong",{parentName:"li"},"WhatsApp list"),").\nStores the new quantity using the ",Object(o.b)("inlineCode",{parentName:"li"},"editcart")," function in a variable and updates it in the database (user details). "),Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Remove item"),": Removes the item from the cart using the ",Object(o.b)("inlineCode",{parentName:"li"},"editcart")," function and the new cart summary is updated in the database (user details)."),Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Shows options to proceed"),": Shows these ",Object(o.b)("strong",{parentName:"li"},"Quick replies")," and clicking on it executes the respective flow ",Object(o.b)("a",{parentName:"li",href:"#linktotheflow"},"Buy now"),", ",Object(o.b)("a",{parentName:"li",href:"#linktotheflow"},"Clear cart")," and ",Object(o.b)("a",{parentName:"li",href:"#linktotheflow"},"Add more products"),".")),Object(o.b)("h3",{id:"clear-cart"},"Clear cart"),Object(o.b)("p",null,"The flow triggers when the user selects ",Object(o.b)("em",{parentName:"p"},"Clear cart")," from the bot flows. The cart becomes empty, and all the item details (Product IDs and Quantity) stored in the user database will be deleted. "),Object(o.b)("center",null,Object(o.b)("img",{src:"https://i.imgur.com/LhUielX.png",alt:"drawing",width:"40%"})),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Starts the flow")," with the intent ",Object(o.b)("inlineCode",{parentName:"li"},"clearCart"),"  when the user selects the ",Object(o.b)("em",{parentName:"li"},"Clear cart")," option from any flow.")),Object(o.b)("ol",{start:2},Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Clears the cart"),": Cart variable is assigned to [], which means the details present in the cart will become null. "),Object(o.b)("p",{parentName:"li"},Object(o.b)("img",{parentName:"p",src:"https://i.imgur.com/6TQukpV.png",alt:null}))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Updates user details"),": The database (user details) is updated to empty the cart. A text node is displayed to the user confirming that the cart is empty and shows the ",Object(o.b)("a",{parentName:"p",href:"#linktotheflow"},"Browse products")," option. "))),Object(o.b)("h3",{id:"buy-now"},"Buy now"),Object(o.b)("p",null,"This flow generates the payment link using the cart details and sends payment link to the bot user."),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"https://i.imgur.com/RIIEaM4.png",alt:null})),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Starts")," the flow using the intent ",Object(o.b)("em",{parentName:"p"},"buyNow"),".")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Verifies if the cart is empty"),": Uses the ",Object(o.b)("strong",{parentName:"p"},"Function")," and ",Object(o.b)("strong",{parentName:"p"},"Condition")," nodes to ensure the cart is not empty before proceeding to the payment.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"If the cart is empty, it shows the ",Object(o.b)("em",{parentName:"p"},"Browse products")," option.")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"If the cart is not empty, it captures the following information required for the order to process.\na. Name and phone number using the respective prompt nodes."),Object(o.b)("p",{parentName:"li"},"b. Address using the ",Object(o.b)("strong",{parentName:"p"},"Location")," node and converts it using the ",Object(o.b)("inlineCode",{parentName:"p"},"addressConverter")," function. User can just share the location from the device."))),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"https://i.imgur.com/Q1wIO3u.png",alt:null})),Object(o.b)("ol",{start:5},Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Generates the payment link"),": Passes these details in the ",Object(o.b)("inlineCode",{parentName:"p"},"paymentlinksinput")," along with the amount (variable) to  the ",Object(o.b)("strong",{parentName:"p"},"Razorpay")," node to generate payment link."),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"Captures the ",Object(o.b)("inlineCode",{parentName:"li"},"paymentId")," (Variables) and updates two  database tables:"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"order_details")," with information userId, phone number, cart details, order ID, order value, order status, shipping address, and payment ID."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"user_details")," table with information cart details, name, phone number, and address.")))),Object(o.b)("blockquote",null,Object(o.b)("ul",{parentName:"blockquote"},Object(o.b)("li",{parentName:"ul"},"Customise the fields that you want to capture. You can modify column names, add more columns or update existing columns."),Object(o.b)("li",{parentName:"ul"},"Use APIs to fetch or update details from an external database."))),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Generates the payment link and sends it to the user.")),Object(o.b)("h3",{id:"razorpay-payment-status"},"Razorpay payment status"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Starts with ",Object(o.b)("em",{parentName:"p"},"Razorpay payment status")," intent."),Object(o.b)("p",{parentName:"li"},Object(o.b)("img",{parentName:"p",src:"https://i.imgur.com/UGqIJeo.png",alt:null}))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Validates the payment status"),": Captures the ",Object(o.b)("inlineCode",{parentName:"p"},"paymentId")," and the value of the ",Object(o.b)("inlineCode",{parentName:"p"},"paymentEvent")," to validate the payment status (",Object(o.b)("strong",{parentName:"p"},"Condition")," and ",Object(o.b)("strong",{parentName:"p"},"Variables"),").\nThe following are the different payment statuses supported:\na. ",Object(o.b)("inlineCode",{parentName:"p"},"payment_link_paid")," - Payment successful"),Object(o.b)("p",{parentName:"li"},"b. ",Object(o.b)("inlineCode",{parentName:"p"},"payment_link_canceled")," - Payment canceled"),Object(o.b)("p",{parentName:"li"},"c. ",Object(o.b)("inlineCode",{parentName:"p"},"payment_link_expired")," - Payment link expired"),Object(o.b)("p",{parentName:"li"},"d. Any other status")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Updates the order status")," (",Object(o.b)("inlineCode",{parentName:"p"},"order_details")," variable) in the database (Database node).  "))),Object(o.b)("h3",{id:"check-order-status"},"Check order status"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Starts")," when the user selects ",Object(o.b)("em",{parentName:"p"},"View order status")," from the bot flow."),Object(o.b)("p",{parentName:"li"},Object(o.b)("img",{parentName:"p",src:"https://i.imgur.com/7xOhX7G.png",alt:null})))),Object(o.b)("ol",{start:2},Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Applies channel filter"),": Verifies the channel from which the flow is triggered using the ",Object(o.b)("strong",{parentName:"li"},"Channel filter")," node - WhatsApp and Other channels.")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"For WhatsApp channel, it uses the WhatsApp number and fetches the  last five orders of the customer from the database (using the ",Object(o.b)("strong",{parentName:"li"},"Function")," node)."),Object(o.b)("li",{parentName:"ul"},"For channels except WhatsApp, it captures the phone number of the user (Phone number node) and uses it in the ",Object(o.b)("strong",{parentName:"li"},"Function")," node to fetch the last five orders of the customer from the database.")),Object(o.b)("h3",{id:"queries-and-concerns"},"Queries and Concerns"),Object(o.b)("p",null,"With this flow, users can ask the bot FAQs or choose to chat with the support team. "),Object(o.b)("img",{src:"https://i.imgur.com/1KSSMut.png",alt:"drawing",width:"45%"})," ",Object(o.b)("img",{src:"https://i.imgur.com/CnKnqCQ.png",alt:"drawing",width:"45%"}),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Starts")," when user selects ",Object(o.b)("em",{parentName:"li"},"Queries and Concerns")," from the menu options. "),Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Shows support options"),": Shows ",Object(o.b)("em",{parentName:"li"},"FAQs")," or Chat with support options using ",Object(o.b)("strong",{parentName:"li"},"Quick replies"),". "),Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"FAQs"),": Shows questions using the ",Object(o.b)("strong",{parentName:"li"},"Quick replies")," node. When the user types a question or selects from the options, it fetches the response from the ",Object(o.b)("a",{parentName:"li",href:"https://docs.yellow.ai/docs/platform_concepts/studio/train/add-faqs"},"Trained FAQs")," list. ")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Add more such questions as ",Object(o.b)("strong",{parentName:"p"},"Quick reply")," options or directly train them on the FAQ page.\nShow more support options if required such as Ask the community, and Refer to docs.")),Object(o.b)("ol",{start:6},Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Chat with support"),": Captures the user information and the query using ",Object(o.b)("a",{parentName:"li",href:"https://docs.yellow.ai/docs/platform_concepts/studio/build/nodes/prompt-nodes"},"prompt nodes")," are uses it to fetch the user data. Then it creates a ticket and assigns it to an Inbox agent (",Object(o.b)("a",{parentName:"li",href:"https://docs.yellow.ai/docs/platform_concepts/studio/build/nodes/action-nodes#17-raise-ticket"},"Raise ticket")," node). The chat is handled by ",Object(o.b)("a",{parentName:"li",href:"https://docs.yellow.ai/docs/platform_concepts/inbox/inbox#4-try-live-agent-module"},"Inbox module"),". ")),Object(o.b)("p",null,Object(o.b)("img",{parentName:"p",src:"https://i.imgur.com/eNr7vI0.png",alt:null})),Object(o.b)("h2",{id:"build-your-own-flows"},"Build your own flows"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Promote products"),": Use the bot as a good lead generation tool. You can send offers, promote new products, offer instant discounts to your leads through Outbound/Workflow campaigns.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Show store location"),": If you are running both offline and online business, enable accessing nearest store location and address using search box or zip code. Use Database to store all your locations or make use of APIs to fetch directly from external systems.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Showcase products from your database"),": Use ",Object(o.b)("a",{parentName:"p",href:"https://docs.yellow.ai/docs/platform_concepts/studio/api/add-api"},"APIs")," and Functions to directly access data from an external database. You can update order/user details, retrieve details, or show any other information that you want your users to access.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Enable single sign-on"),": Make use of the ",Object(o.b)("a",{parentName:"p",href:"https://docs.yellow.ai/docs/platform_concepts/studio/api/add-api"},"API")," or Database modules and pass a custom script that can read data from your ecommerce site and pass it to the bot  every time the user opens the bot."))))}b.isMDXComponent=!0},461:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return d}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},b=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),b=p(a),u=n,d=b["".concat(i,".").concat(u)]||b[u]||m[u]||o;return a?r.a.createElement(d,s(s({ref:t},l),{},{components:a})):r.a.createElement(d,s({ref:t},l))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var l=2;l<o;l++)i[l]=a[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);