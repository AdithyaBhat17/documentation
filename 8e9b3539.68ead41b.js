(window.webpackJsonp=window.webpackJsonp||[]).push([[199],{276:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return l}));var a=n(3),r=n(7),o=(n(0),n(411)),s={title:"Streams Via REST API"},c={unversionedId:"guides/streams_mode/using_rest_api",id:"guides/streams_mode/using_rest_api",isDocsHomePage:!1,title:"Streams Via REST API",description:"By using the Benthos streams mode REST API you can dynamically control which",source:"@site/docs/guides/streams_mode/using_rest_api.md",slug:"/guides/streams_mode/using_rest_api",permalink:"/docs/guides/streams_mode/using_rest_api",editUrl:"https://github.com/Jeffail/benthos/edit/master/website/docs/guides/streams_mode/using_rest_api.md",version:"current",sidebar:"docs",previous:{title:"Streams Via Config Files",permalink:"/docs/guides/streams_mode/using_config_files"},next:{title:"Streams API",permalink:"/docs/guides/streams_mode/streams_api"}},i=[{value:"Walkthrough",id:"walkthrough",children:[]}],p={toc:i};function l(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"By using the Benthos ",Object(o.b)("inlineCode",{parentName:"p"},"streams")," mode REST API you can dynamically control which\nstreams are active at runtime. The full spec for the Benthos streams mode REST\nAPI can be ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/guides/streams_mode/streams_api"}),"found here"),"."),Object(o.b)("p",null,"Note that stream configs created and updated using this API do ",Object(o.b)("em",{parentName:"p"},"not")," benefit\nfrom ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/configuration/interpolation"}),"environment variable interpolation")," (function interpolation\nwill still work)."),Object(o.b)("h2",{id:"walkthrough"},"Walkthrough"),Object(o.b)("p",null,"Start by running Benthos in streams mode:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"$ benthos streams\n")),Object(o.b)("p",null,"On a separate terminal we can add our first stream ",Object(o.b)("inlineCode",{parentName:"p"},"foo")," by ",Object(o.b)("inlineCode",{parentName:"p"},"POST"),"ing a JSON or\nYAML config to the ",Object(o.b)("inlineCode",{parentName:"p"},"/streams/foo")," endpoint:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'$ curl http://localhost:4195/streams/foo -X POST --data-binary @- <<EOF\ninput:\n  type: http_server\nbuffer:\n  type: memory\npipeline:\n  threads: 4\n  processors:\n  - type: bloblang\n    bloblang: |\n      root = {\n        "id": this.user.id,\n        "content": this.body.content\n      }\noutput:\n  type: http_server\nEOF\n')),Object(o.b)("p",null,"Now we can check the full set of streams loaded by ",Object(o.b)("inlineCode",{parentName:"p"},"GET"),"ing the ",Object(o.b)("inlineCode",{parentName:"p"},"/streams"),"\nendpoint:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'$ curl http://localhost:4195/streams | jq \'.\'\n{\n  "foo": {\n    "active": true,\n    "uptime": 7.223545951,\n    "uptime_str": "7.223545951s"\n  }\n}\n')),Object(o.b)("p",null,"And we can send data to our new stream via it's namespaced URL:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'$ curl http://localhost:4195/foo/post -d \'{"user":{"id":"foo"},"body":{"content":"bar"}}\'\n')),Object(o.b)("p",null,"Good, now let's add another stream ",Object(o.b)("inlineCode",{parentName:"p"},"bar")," the same way:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"$ curl http://localhost:4195/streams/bar -X POST --data-binary @- <<EOF\ninput:\n  type: kafka\n  kafka:\n    addresses:\n    - localhost:9092\n    topics:\n    - my_topic\nbuffer:\n  type: none\npipeline:\n  threads: 1\n  processors:\n  - type: bloblang\n    bloblang: 'root = this.uppercase()'\noutput:\n  type: elasticsearch\n  elasticsearch:\n    urls:\n    - http://localhost:9200\nEOF\n")),Object(o.b)("p",null,"And check the set again:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'$ curl http://localhost:4195/streams | jq \'.\'\n{\n  "bar": {\n    "active": true,\n    "uptime": 10.121344484,\n    "uptime_str": "10.121344484s"\n  },\n  "foo": {\n    "active": true,\n    "uptime": 19.380582951,\n    "uptime_str": "19.380583306s"\n  }\n}\n')),Object(o.b)("p",null,"It's also possible to get the configuration of a loaded stream by ",Object(o.b)("inlineCode",{parentName:"p"},"GET"),"ing the\npath ",Object(o.b)("inlineCode",{parentName:"p"},"/streams/{id}"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'$ curl http://localhost:4195/streams/foo | jq \'.\'\n{\n  "active": true,\n  "uptime": 30.123488951,\n  "uptime_str": "30.123488951s"\n  "config": {\n    "input": {\n      "type": "http_server",\n      "http_server": {\n        "address": "",\n        "cert_file": "",\n        "key_file": "",\n        "path": "/post",\n        "timeout": "5s"\n      }\n    },\n    "buffer": {\n      "type": "memory",\n      "memory": {\n        "limit": 10000000\n      }\n    },\n    ... etc ...\n  }\n}\n')),Object(o.b)("p",null,"Next, we might want to update stream ",Object(o.b)("inlineCode",{parentName:"p"},"foo")," by ",Object(o.b)("inlineCode",{parentName:"p"},"PUT"),"ing a new config to the path\n",Object(o.b)("inlineCode",{parentName:"p"},"/streams/foo"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'$ curl http://localhost:4195/streams/foo -X PUT --data-binary @- <<EOF\ninput:\n  type: http_server\nbuffer:\n  type: none\npipeline:\n  threads: 4\n  processors:\n  - type: bloblang\n    bloblang: |\n      root = {\n        "id": this.user.id,\n        "content": this.body.content\n      }\noutput:\n  type: http_server\nEOF\n')),Object(o.b)("p",null,"We have removed the memory buffer with this change, let's check that the config\nhas actually been updated:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'$ curl http://localhost:4195/streams/foo | jq \'.\'\n{\n  "active": true,\n  "uptime": 12.328482951,\n  "uptime_str": "12.328482951s"\n  "config": {\n    "input": {\n      "type": "http_server",\n      "http_server": {\n        "address": "",\n        "cert_file": "",\n        "key_file": "",\n        "path": "/post",\n        "timeout": "5s"\n      }\n    },\n    "buffer": {\n      "type": "none"\n    },\n    ... etc ...\n  }\n}\n')),Object(o.b)("p",null,"Good, we are done with stream ",Object(o.b)("inlineCode",{parentName:"p"},"bar")," now, so let's delete it by ",Object(o.b)("inlineCode",{parentName:"p"},"DELETE"),"ing the\n",Object(o.b)("inlineCode",{parentName:"p"},"/streams/bar")," endpoint:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"$ curl http://localhost:4195/streams/bar -X DELETE\n")),Object(o.b)("p",null,"And let's ",Object(o.b)("inlineCode",{parentName:"p"},"GET")," the ",Object(o.b)("inlineCode",{parentName:"p"},"/streams")," endpoint to see the new set:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'$ curl http://localhost:4195/streams | jq \'.\'\n{\n  "foo": {\n    "active": true,\n    "uptime": 31.872448851,\n    "uptime_str": "31.872448851s"\n  }\n}\n')),Object(o.b)("p",null,"Great. Another useful feature is ",Object(o.b)("inlineCode",{parentName:"p"},"POST"),"ing to ",Object(o.b)("inlineCode",{parentName:"p"},"/streams"),", this allows us to set\nthe entire set of streams with a single request."),Object(o.b)("p",null,"The payload is a map of stream ids to configurations and this will become the\nexclusive set of active streams. If there are existing streams that are not on\nthe list they will be removed."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"$ curl http://localhost:4195/streams -X POST --data-binary @- <<EOF\nbar:\n  input:\n    type: http_client\n    http_client:\n      url: http://localhost:4195/baz/get\n  output:\n    type: stdout\nbaz:\n  input:\n    type: http_server\n  output:\n    type: http_server\nEOF\n")),Object(o.b)("p",null,"Let's check our new set of streams:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'$ curl http://localhost:4195/streams | jq \'.\'\n{\n  "bar": {\n    "active": true,\n    "uptime": 3.183883444,\n    "uptime_str": "3.183883444s"\n  },\n  "baz": {\n    "active": true,\n    "uptime": 3.183883449,\n    "uptime_str": "3.183883449s"\n  }\n}\n')),Object(o.b)("p",null,"Done."))}l.isMDXComponent=!0},411:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),l=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=l(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),b=l(n),m=a,d=b["".concat(s,".").concat(m)]||b[m]||u[m]||o;return n?r.a.createElement(d,c(c({ref:t},p),{},{components:n})):r.a.createElement(d,c({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,s[1]=c;for(var p=2;p<o;p++)s[p]=n[p];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);