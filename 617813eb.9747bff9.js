(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{129:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return u}));var o=t(3),a=t(7),r=(t(0),t(216)),i={title:"iOS Chat SDK",sidebar_label:"iOS Chat SDK"},c={unversionedId:"documentation/channel-configuration/ios",id:"documentation/channel-configuration/ios",isDocsHomePage:!1,title:"iOS Chat SDK",description:"Setup",source:"@site/docs/documentation/channel-configuration/ios.md",slug:"/documentation/channel-configuration/ios",permalink:"/docs/documentation/channel-configuration/ios",version:"current",sidebar_label:"iOS Chat SDK",sidebar:"documentation",previous:{title:"Android Chat SDK",permalink:"/docs/documentation/channel-configuration/android"},next:{title:"WhatsApp",permalink:"/docs/documentation/channel-configuration/whatsapp"}},l=[{value:"Setup",id:"setup",children:[]},{value:"Example",id:"example",children:[{value:"Configuration References",id:"configuration-references",children:[]},{value:"Payload References",id:"payload-references",children:[]}]},{value:"Features BETA",id:"features-beta",children:[]}],s={toc:l};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"setup"},"Setup"),Object(r.b)("p",null,"Clone the ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://github.com/yellowmessenger/webview-sdk-ios"}),"repository")," then add the following files in your xcode project by going to ",Object(r.b)("strong",{parentName:"p"},"File>Add Files to < Project-Name >")," "),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"1. YmSDK.swift"),Object(r.b)("br",{parentName:"p"}),"\n",Object(r.b)("strong",{parentName:"p"},"2. YmEvents.swift"),Object(r.b)("br",{parentName:"p"}),"\n",Object(r.b)("strong",{parentName:"p"},"3. YmBotPlugin.swift"),"  "),Object(r.b)("p",null,"Also add the the icons for mic button and close button in assets."),Object(r.b)("h2",{id:"example"},"Example"),Object(r.b)("p",null,"Example swift code to use the plugin"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'//Add the following function in ViewController.swift\n    func openWebView(_ sender: Any) {\n        //Set Configuration data\n        let config:[String:String] = ["BotId" : "<BOT-ID>"]\n\n        //Initialize the plugin with config values.\n        YmBotPlugin.shared.initPlugin(config: config) //Step 1\n\n        //Set EventListener to handle bot events.\n        YmBotPlugin.shared.events.listenTo(eventName: "BotEvent", action: {\n            (information:Any?) in\n            if let info = information as? Dictionary<String, String> {\n                print("Closing Bot")\n                //To stop chatbot use the following function\n                YmBotPlugin.shared.stopChatBot() //Step 5\n                switch info["code"] {\n                case "login-user":\n                    //Each event has two keys, "code" and "data". Use info["code"] or info["data"] to access the values\n                    //The following code restarts the chatbot with different payload values.\n                    let payloads:[String:String] = ["UserState":"LoggedIn"]\n                    YmBotPlugin.shared.setPayload(payload: payloads)\n                    YmBotPlugin.shared.startChatBot(view: self.view)\n                //Add other cases acording to need.\n                default:\n                    print("Unknown Event")\n                }\n            }\n        }) // Step 2\n        \n        //Setting payload values\n        let payloads:[String:String] = ["UserState":"Anonymous"]\n\n        //Pass payload to the bot\n        YmBotPlugin.shared.setPayload(payload: payloads) //Step 3\n\n        //Start the chatbot webview\n        YmBotPlugin.shared.startChatBot(view: self.view) //Step 4\n    }\n')),Object(r.b)("h3",{id:"configuration-references"},"Configuration References"),Object(r.b)("p",null,"You can set the following configuration on the bot"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'"BotId" : "<BOT_ID_FROM_YM>",\n"EnableHistory" : "<true or false as String>",\n"EnableSpeech" : "<true or false as String>"\n')),Object(r.b)("h3",{id:"payload-references"},"Payload References"),Object(r.b)("p",null,"You can set payload values according to requirement. Following are some sample payloads that you can set."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'"userFullName":"<User-Name>", \n"token":"<Access-Token>"\n')),Object(r.b)("h2",{id:"features-beta"},"Features ","[BETA]"),Object(r.b)("p",null,"To use the voice first feature, add the following to your info.plist file if the permissions are not added already."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"<key>NSMicrophoneUsageDescription</key>  \n<string>Your microphone will be used to record your speech when you use the Voice feature.</string>\n<key>NSSpeechRecognitionUsageDescription</key>  \n<string>Speech recognition will be used to determine which words you speak into this device&apos;s microphone.</string>\n")),Object(r.b)("p",null,"Then add the following key to configuration: "),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'let config:[String:String] = ["BotId" : "<BOT-ID>", "EnableSpeech":"true"]\n')))}u.isMDXComponent=!0},216:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return f}));var o=t(0),a=t.n(o);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),u=function(e){var n=a.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=u(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(t),b=o,f=p["".concat(i,".").concat(b)]||p[b]||d[b]||r;return t?a.a.createElement(f,c(c({ref:n},s),{},{components:t})):a.a.createElement(f,c({ref:n},s))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=b;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<r;s++)i[s]=t[s];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);