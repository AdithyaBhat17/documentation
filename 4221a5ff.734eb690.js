(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{170:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return b}));var a=n(3),o=n(7),i=(n(0),n(411)),r={title:"Bloblang",sidebar_label:"About",description:"The Benthos native mapping language"},c={unversionedId:"guides/bloblang/about",id:"guides/bloblang/about",isDocsHomePage:!1,title:"Bloblang",description:"The Benthos native mapping language",source:"@site/docs/guides/bloblang/about.md",slug:"/guides/bloblang/about",permalink:"/docs/guides/bloblang/about",editUrl:"https://github.com/Jeffail/benthos/edit/master/website/docs/guides/bloblang/about.md",version:"current",sidebar_label:"About",sidebar:"docs",previous:{title:"Getting Started",permalink:"/docs/guides/getting_started"},next:{title:"Bloblang Functions",permalink:"/docs/guides/bloblang/functions"}},l=[{value:"Assignment",id:"assignment",children:[{value:"Non-structured Results",id:"non-structured-results",children:[]},{value:"Deleting",id:"deleting",children:[]},{value:"Variables",id:"variables",children:[]},{value:"Metadata",id:"metadata",children:[]},{value:"Special Characters in Paths",id:"special-characters-in-paths",children:[]}]},{value:"Coalesce",id:"coalesce",children:[]},{value:"Literals",id:"literals",children:[]},{value:"Comments",id:"comments",children:[]},{value:"Boolean Logic and Arithmetic",id:"boolean-logic-and-arithmetic",children:[]},{value:"Conditional Mapping",id:"conditional-mapping",children:[]},{value:"Pattern Matching",id:"pattern-matching",children:[]},{value:"Functions",id:"functions",children:[]},{value:"Methods",id:"methods",children:[]},{value:"Maps",id:"maps",children:[]},{value:"Import Maps",id:"import-maps",children:[]},{value:"Filtering",id:"filtering",children:[]},{value:"Error Handling",id:"error-handling",children:[]}],s={toc:l};function b(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Bloblang, or blobl for short, is a language designed for mapping data of a wide variety of forms. It's a safe, fast, and powerful way to perform document mapping within Benthos."),Object(i.b)("p",null,"Bloblang is available as a ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/components/processors/bloblang"}),"processor")," and it's also possible to use blobl queries in ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/configuration/interpolation#bloblang-queries"}),"function interpolations"),"."),Object(i.b)("p",null,"You can also execute Bloblang mappings on the command-line with the ",Object(i.b)("inlineCode",{parentName:"p"},"blobl")," subcommand:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"$ cat data.jsonl | benthos blobl 'foo.(bar | baz).buz'\n")),Object(i.b)("h2",{id:"assignment"},"Assignment"),Object(i.b)("p",null,"A Bloblang mapping expresses how to create a new document by extracting data from an existing input document. Assignments consist of a ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/configuration/field_paths"}),"dot path")," argument on the left-hand side describing a field to be created within the new document, and a right-hand side query describing what the content of the new field should be."),Object(i.b)("p",null,"The keyword ",Object(i.b)("inlineCode",{parentName:"p"},"root")," on the left-hand side refers to the root of the new document, the keyword ",Object(i.b)("inlineCode",{parentName:"p"},"this")," on the right-hand side refers to the current context of the query, which is the read-only input document when querying from the root of a mapping:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffee"}),'root.id = this.thing.id\nroot.type = "yo"\n\n# Both `root` and `this` are optional, and will be inferred in their absence.\ncontent = thing.doc.message\n\n# In:  {"thing":{"id":"wat1","doc":{"title":"wut","message":"hello world"}}}\n# Out: {"content":"hello world","id":"wat1","type":"yo"}\n')),Object(i.b)("p",null,"Since the document being created starts off empty it is sometimes useful to begin a mapping by copying the entire contents of the input document, which can be expressed by assigning ",Object(i.b)("inlineCode",{parentName:"p"},"this")," to ",Object(i.b)("inlineCode",{parentName:"p"},"root"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffee"}),'root = this\nroot.foo = "added value"\n\n# In:  {"id":"wat1","message":"hello world"}\n# Out: {"id":"wat1","message":"hello world","foo":"added value"}\n')),Object(i.b)("h3",{id:"non-structured-results"},"Non-structured Results"),Object(i.b)("p",null,"Your newly mapped document doesn't need to be a structured object, simply assign a value type to the ",Object(i.b)("inlineCode",{parentName:"p"},"root")," of your document:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffee"}),'root = this.foo\n\n# In:  {"foo":"hello world"}\n# Out: hello world\n')),Object(i.b)("p",null,"And the resulting message payload will be the raw value you've assigned."),Object(i.b)("h3",{id:"deleting"},"Deleting"),Object(i.b)("p",null,"It's possible to selectively delete fields from an object by assigning the function ",Object(i.b)("inlineCode",{parentName:"p"},"deleted()")," to the field path:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffee"}),'root = this\nroot.bar = deleted()\n\n# In:  {"id":"wat1","message":"hello world","bar":"remove me"}\n# Out: {"id":"wat1","message":"hello world"}\n')),Object(i.b)("h3",{id:"variables"},"Variables"),Object(i.b)("p",null,"Another type of assignment is a ",Object(i.b)("inlineCode",{parentName:"p"},"let")," statement, which creates a variable that can be referenced elsewhere within a mapping. Variables are discarded at the end of the mapping and are mostly useful for query reuse. Variables are referenced within queries with ",Object(i.b)("inlineCode",{parentName:"p"},"$"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffee"}),'# Set a temporary variable\nlet foo = "yo"\n\nroot.new_doc.type = $foo\n')),Object(i.b)("h3",{id:"metadata"},"Metadata"),Object(i.b)("p",null,"Benthos messages contain metadata that is separate from the main payload, in Bloblang you can query and modify the metadata of messages with the ",Object(i.b)("inlineCode",{parentName:"p"},"meta")," assignment keyword and query function:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffee"}),'# Delete all existing metadata\nmeta = deleted()\n\n# Set a metadata value\nmeta bar = "hello world"\n\n# Reference a metadata value from the input message\nroot.new_doc.bar = meta("kafka_topic")\n')),Object(i.b)("h3",{id:"special-characters-in-paths"},"Special Characters in Paths"),Object(i.b)("p",null,"Quotes can be used to describe sections of a field path that contain whitespace, dots or other special characters:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffee"}),'# Use quotes around a path segment in order to include whitespace or dots within\n# the path\nroot."foo.bar".baz = this."buz bev".fub\n\n# In:  {"buz bev":{"fub":"hello world"}}\n# Out: {"foo.bar":{"baz":"hello world"}}\n')),Object(i.b)("h2",{id:"coalesce"},"Coalesce"),Object(i.b)("p",null,"The pipe operator (",Object(i.b)("inlineCode",{parentName:"p"},"|"),") used within brackets allows you to coalesce values within a path:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffee"}),'root.new_doc.type = this.thing.(article | comment | this).type\n\n# In:  {"thing":{"article":{"type":"foo"}}}\n# Out: {"new_doc":{"type":"foo"}}\n\n# In:  {"thing":{"comment":{"type":"bar"}}}\n# Out: {"new_doc":{"type":"bar"}}\n\n# In:  {"thing":{"type":"baz"}}\n# Out: {"new_doc":{"type":"baz"}}\n')),Object(i.b)("p",null,"This is a called a bracketed mapping and within it the context changes to the path value it is added to, therefore in the above example ",Object(i.b)("inlineCode",{parentName:"p"},"this")," within the brackets refers to the contents of ",Object(i.b)("inlineCode",{parentName:"p"},"this.thing"),"."),Object(i.b)("h2",{id:"literals"},"Literals"),Object(i.b)("p",null,"Bloblang supports number, boolean, string, null, array and object literals:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffee"}),'root = [\n  7, false, "string", null, {\n    "first": 11,\n    "second": {"foo":"bar"},\n    "third": """multiple\nlines on this\nstring"""\n  }\n]\n\n# In:  {}\n# Out: [7,false,"string",null,{"first":11,"second":{"foo":"bar"},"third":"multiple\\nlines on this\\nstring"}]\n')),Object(i.b)("h2",{id:"comments"},"Comments"),Object(i.b)("p",null,"You might've already spotted, comments are started with a hash (",Object(i.b)("inlineCode",{parentName:"p"},"#"),") and end with a line break:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffee"}),"root = this.some.value # And now this is a comment\n")),Object(i.b)("h2",{id:"boolean-logic-and-arithmetic"},"Boolean Logic and Arithmetic"),Object(i.b)("p",null,"Bloblang supports a range of boolean operators ",Object(i.b)("inlineCode",{parentName:"p"},"!"),", ",Object(i.b)("inlineCode",{parentName:"p"},">"),", ",Object(i.b)("inlineCode",{parentName:"p"},">="),", ",Object(i.b)("inlineCode",{parentName:"p"},"=="),", ",Object(i.b)("inlineCode",{parentName:"p"},"<"),", ",Object(i.b)("inlineCode",{parentName:"p"},"<="),", ",Object(i.b)("inlineCode",{parentName:"p"},"&&"),", ",Object(i.b)("inlineCode",{parentName:"p"},"||")," and arithmetic operators ",Object(i.b)("inlineCode",{parentName:"p"},"+"),", ",Object(i.b)("inlineCode",{parentName:"p"},"-"),", ",Object(i.b)("inlineCode",{parentName:"p"},"*"),", ",Object(i.b)("inlineCode",{parentName:"p"},"/"),", ",Object(i.b)("inlineCode",{parentName:"p"},"%"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffee"}),'root.is_big = this.number > 100\nroot.multiplied = this.number * 7\n\n# In:  {"number":50}\n# Out: {"is_big":false,"multiplied":350}\n\n# In:  {"number":150}\n# Out: {"is_big":true,"multiplied":1050}\n')),Object(i.b)("h2",{id:"conditional-mapping"},"Conditional Mapping"),Object(i.b)("p",null,"Use ",Object(i.b)("inlineCode",{parentName:"p"},"if")," expressions to perform maps conditionally:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffee"}),'root = this\nroot.sorted_foo = if this.foo.type() == "array" { this.foo.sort() }\n\n# In:  {"foo":"foobar"}\n# Out: {"foo":"foobar"}\n\n# In:  {"foo":["foo","bar"]}\n# Out: {"foo":["foo","bar"],"sorted_foo":["bar","foo"]}\n')),Object(i.b)("p",null,"And add an ",Object(i.b)("inlineCode",{parentName:"p"},"else")," for alternative maps:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffee"}),'root.foo = if this.exists("foo") {\n  this.foo\n} else {\n  "default"\n}\n\n# In:  {"foo":"foobar"}\n# Out: {"foo":"foobar"}\n\n# In:  {}\n# Out: {"foo":"default"}\n')),Object(i.b)("h2",{id:"pattern-matching"},"Pattern Matching"),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"match")," expression allows you to perform conditional mappings on a value using boolean logic:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffee"}),'root.new_doc = match this.doc {\n  this.type == "article" => this.article\n  this.type == "comment" => this.comment\n  _ => this\n}\n\n# In:  {"doc":{"type":"article","article":{"id":"foo","content":"qux"}}}\n# Out: {"new_doc":{"id":"foo","content":"qux"}}\n\n# In:  {"doc":{"type":"comment","comment":{"id":"bar","content":"quz"}}}\n# Out: {"new_doc":{"id":"bar","content":"quz"}}\n\n# In:  {"doc":{"type":"neither","content":"some other stuff unchanged"}}\n# Out: {"new_doc":{"type":"neither","content":"some other stuff unchanged"}}\n')),Object(i.b)("p",null,"Within a match block the context of ",Object(i.b)("inlineCode",{parentName:"p"},"this")," changes to the pattern matched expression, therefore ",Object(i.b)("inlineCode",{parentName:"p"},"this")," within the match expression above refers to ",Object(i.b)("inlineCode",{parentName:"p"},"this.doc"),"."),Object(i.b)("p",null,"Match cases can specify a literal value for simple comparison:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffee"}),'root = this\nroot.type = match this.type { "doc" => "document", "art" => "article", _ => this }\n\n# In:  {"type":"doc","foo":"bar"}\n# Out: {"type":"document","foo":"bar"}\n')),Object(i.b)("p",null,"The match expression can also be left unset which means the context remains unchanged, and the catch-all case can also be omitted:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffee"}),'root.new_doc = match {\n  this.doc.type == "article" => this.doc.article\n  this.doc.type == "comment" => this.doc.comment\n}\n\n# In:  {"doc":{"type":"neither","content":"some other stuff unchanged"}}\n# Out: {"doc":{"type":"neither","content":"some other stuff unchanged"}}\n')),Object(i.b)("p",null,"If no case matches then the mapping is skipped entirely, hence we would end up with the original document in this case."),Object(i.b)("h2",{id:"functions"},"Functions"),Object(i.b)("p",null,"Functions can be placed anywhere and allow you to extract information from your environment, generate values, or access data from the underlying message being mapped:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffee"}),"root.doc.id = uuid_v4()\nroot.doc.received_at = now()\nroot.doc.host = hostname()\n")),Object(i.b)("p",null,"You can find a full list of functions in ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/guides/bloblang/functions"}),"this doc"),"."),Object(i.b)("h2",{id:"methods"},"Methods"),Object(i.b)("p",null,"Methods provide most of the power in Bloblang as they allow you to augment query values and can be added to any expression:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffee"}),'root.doc.id = this.thing.id.string().catch(uuid_v4())\nroot.doc.reduced_nums = this.thing.nums.for_each(\n  match this {\n    this < 10 => deleted()\n    _ => this - 10\n  }\n)\nroot.has_good_taste = ["pikachu","mewtwo","magmar"].contains(this.user.fav_pokemon)\n')),Object(i.b)("p",null,"You can find a full list of methods in ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/guides/bloblang/methods"}),"this doc"),"."),Object(i.b)("h2",{id:"maps"},"Maps"),Object(i.b)("p",null,"It's possible to declare reusable maps for common operations:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffee"}),'map things {\n  root.first  = this.thing_one\n  root.second = this.thing_two\n}\n\nroot.foo = this.value_one.apply("things")\nroot.bar = this.value_two.apply("things")\n\n# In:  {"value_one":{"thing_one":"hey","thing_two":"yo"},"value_two":{"thing_one":"sup","thing_two":"waddup"}}\n# Out: {"foo":{"first":"hey","second":"yo"},"bar":{"first":"sup","second":"waddup"}}\n')),Object(i.b)("p",null,"Within a map the keyword ",Object(i.b)("inlineCode",{parentName:"p"},"root")," refers to a newly created document, and ",Object(i.b)("inlineCode",{parentName:"p"},"this")," refers to whatever the map is applied to."),Object(i.b)("h2",{id:"import-maps"},"Import Maps"),Object(i.b)("p",null,"It's possible to import maps defined in a file with an ",Object(i.b)("inlineCode",{parentName:"p"},"import")," statement:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffee"}),'import "./common_maps.blobl"\n\nroot.foo = this.value_one.apply("things")\nroot.bar = this.value_two.apply("things")\n')),Object(i.b)("p",null,"Imports from a Bloblang mapping within a Benthos config are relative to the process running the config. Imports from an imported file are relative to the file that is importing it."),Object(i.b)("h2",{id:"filtering"},"Filtering"),Object(i.b)("p",null,"By assigning the root of a mapped document to the ",Object(i.b)("inlineCode",{parentName:"p"},"deleted()")," function you can delete a message entirely:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffee"}),"# Filter all messages that have fewer than 10 URLs.\nroot = match {\n  this.doc.urls.length() < 10 => deleted()\n}\n")),Object(i.b)("h2",{id:"error-handling"},"Error Handling"),Object(i.b)("p",null,"Functions and methods can fail under certain circumstances, such as when they receive types they aren't able to act upon. These failures, when not caught, will cause the entire mapping to fail. However, the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/guides/bloblang/methods#catch"}),"method ",Object(i.b)("inlineCode",{parentName:"a"},"catch"))," can be used in order to return a value when a failure occurs instead:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffee"}),'# Map an empty array to `foo` if the field `bar` is not a string.\nroot.foo = this.bar.split(",").catch([])\n')),Object(i.b)("p",null,"Since ",Object(i.b)("inlineCode",{parentName:"p"},"catch")," is a method it can also be attached to bracketed map expressions:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffee"}),'# Map `false` if any of the operations in this boolean query fail.\nroot.thing = ( this.foo > this.bar && this.baz.contains("wut") ).catch(false)\n')),Object(i.b)("p",null,"And one of the more powerful features of Bloblang is that a single ",Object(i.b)("inlineCode",{parentName:"p"},"catch")," method at the end of a chain of methods can recover errors from any method in the chain:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffee"}),'# Catch errors caused by:\n# - foo not existing\n# - foo not being a string\n# - an element from split foo not being a valid JSON string\nroot.things = this.foo.split(",").map_each( this.parse_json() ).catch([])\n\n# Specifically catch a JSON parse error\nroot.things = this.foo.split(",").map_each( this.parse_json().catch({}) )\n')),Object(i.b)("p",null,"However, the ",Object(i.b)("inlineCode",{parentName:"p"},"catch")," method only acts on errors, sometimes it's also useful to set a fall back value when a query returns ",Object(i.b)("inlineCode",{parentName:"p"},"null")," in which case the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/guides/bloblang/methods#or"}),"method ",Object(i.b)("inlineCode",{parentName:"a"},"or"))," can be used the same way:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-coffee"}),'# Map "default" if either the element index 5 does not exist, or the underlying\n# element is `null`.\nroot.foo = this.bar.index(5).or("default")\n')))}b.isMDXComponent=!0},411:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),o=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),b=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=b(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},u=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=b(n),u=a,h=p["".concat(r,".").concat(u)]||p[u]||d[u]||i;return n?o.a.createElement(h,c(c({ref:t},s),{},{components:n})):o.a.createElement(h,c({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,r[1]=c;for(var s=2;s<i;s++)r[s]=n[s];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);